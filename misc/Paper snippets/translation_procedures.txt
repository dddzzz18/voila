abstract_atomic procedure proc(T1 x1, T2 x2, ...) returns (T'1 y1, ...)
  interference ?a1 in S1 on r1; // inter1
  interference ?a2 in S2 on r2; // inter2
  ...
  requires PRE;
  ensures  POST;
{ 
  T''1 z1;
  ...

  s;
}

NOTE: It is assumed (and checked by Voila, I think) that each region identifier r_i
      is used with exactly one region assertion R_i(r_i, e_i_1, e_i_2, ...)

vprMethodBody ≡
  ⟦T''1 z1⟧, ⟦T''2 z2⟧, ... // TODO: Define
  inhale R1_X(r1, ⟦e11⟧, ⟦e12⟧, ...) == ⟦S1⟧; // inter1
  inhale R2_X(r2, ⟦e21⟧, ⟦e22⟧, ...) == ⟦S2⟧; // inter2
  ...
  ⟦s⟧

inhaleSkolemizationFunctionFootprints ≡ ... // Can probably be omitted

procedureWideBoundLogicalVariableDeclarations ≡ ... // TODO: Local variables for bound logical variables

bodyWithPreamble ≡ ... // TODO
  // 1. Declare procedureWideBoundLogicalVariableDeclarations
  // 2. inhaleSkolemizationFunctionFootprints
  // 3. vprMethodBody


return
  method proc(⟦T1 x1⟧, ...) returns (⟦T'1 y1⟧, ...)
    requires ⟦PRE⟧
    requires ⟦inter1⟧
    requires ⟦inter2⟧
    requires ...
    ensures  ⟦POST⟧
  {
    bodyWithPreamble
  }

=========================================================================

⟦interference ?a in S on r⟧ ≡
  // Let R(r, e1, ...) be the region assertion r is used with (see note above)

  return
    R_state(r, ⟦e1⟧, ...) in ⟦S⟧