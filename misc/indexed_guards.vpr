predicate TK(n: Int)

field f: Int

// domain stub {
  // function dummy(n: Int): Bool
// }

method test(x: Ref) {
  var n0: Int
  
  /* From Caper's ticket lock example
   * 
   * forall n < m | TK(k | n <= k < m): n ~~> m
   *
   */
  
  inhale acc(x.f) && x.f == n0
  inhale TK(n0)
  
  exhale acc(x.f)
  inhale acc(x.f)
  var S1: Set[Int]
  assume 
    forall m: Int :: {m in S1} 
      m in S1 <==> n0 <= m && 
                   (m == n0 || 
                    (forall k: Int :: /*{dummy(k)}*/ n0 <= k && k < m ==> perm(TK(k)) == none))
                    
  var rnd: Int
              
  if (rnd == 0) {              
    assume x.f in S1
    // assume dummy(n0)
    assert x.f == n0 // Fails in Silicon (but not in Carbon)
  } elseif (rnd == 1) {
    var n1: Int
    assume n1 in S1
    // assume dummy(n0)
    assert n1 == n0 // Fails in Silicon (but not in Carbon)
  }
}