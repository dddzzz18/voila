
region BCounter(id r, int lvl, memcell x)
  guards { duplicable INCREMENT; }
  interpretation {
    x.f |-> ?v && (v == 0 || v == 1 || v == 2)
  }
  state { v }
  actions { INCREMENT: ?n ~> ?m; }

procedure makeBCounter(id r, int lvl) returns (memcell ret)
  requires lvl >= 0;
  ensures BCounter(r, lvl, ret) && INCREMENT@r;
{
  memcell v;

  // v := new memcell(0);
  inhale v.f |-> ?w;
  v.f := 0;

  ret := v;

  // create BCounter(r, lvl, ret, 0);
  inhale INCREMENT@r;
  fold BCounter(r, lvl, ret, 0);
}

make_atomic procedure incr(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int;
  requires BCounter(c, lvl, x, n) && INCREMENT@c;
  ensures BCounter(c, lvl, x, ?z) && INCREMENT@c;
  ensures ret == n && (n < 2 ? z == n + 1 : z == 0);
{
  int v;
  int w;
  bool b;

  do
    invariant BCounter(c, lvl, x);
    invariant !b ==> c |=> <D>;
    invariant  b ==> c |=> (v, w);
    invariant (v < 2 ? w == v + 1 : w == 0);
  {
    open_region using BCounter(c, lvl, x) {
      v := x.f;
    }

    if (v < 2) {
      w := v + 1;
    } else {
      w := 0;
    }

    update_region using BCounter(c, lvl, x) {
      b := CAS(x, v, w);
    }
  } while (!b);

  ret := v;
}


abstract_atomic procedure read(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int;
  requires BCounter(c, lvl, x, n) && INCREMENT@c;
  ensures BCounter(c, lvl, x, n) && INCREMENT@c;
  ensures ret == n;
{
  open_region using BCounter(c, lvl, x) {
    ret := x.f;
  }
}


primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

struct memcell {
  int f;
}
