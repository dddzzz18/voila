
struct memcell {
  int f;
}

region Join(id r, int lvl, memcell x)
  guards {
    duplicable SET;
    duplicable Z;
  }
  interpretation { x.f |-> ?v && (v == 0 || v == 1) }
  state { v }
  actions { SET: 0 ~> 1; }


procedure makeJoin(int lvl) returns (memcell ret, id r)
  requires lvl >= 0;
  ensures  Join(r, lvl, ret) && SET@r;
{
  ret := new memcell(0);
  r := new Join(lvl, ret) with SET;
}


abstract_atomic procedure set_to_one(id r, int lvl, memcell x)
  requires Join(r, lvl, x) && SET@r;
  ensures  Join(r, lvl, x, 1) && SET@r;
{
  use_atomic using Join(r, lvl, x) with SET@r {
    x.f := 1;
  }
}


make_atomic procedure wait(id r, int lvl, memcell x)
  interference ?z in Set<int>(?u | true);
  requires Join(r, lvl, x, z) && Z@r;
  ensures  Join(r, lvl, x, 1) && Z@r;
{
  int v;

  do
    invariant Join(r, lvl, x, ?w);
    invariant (v == 0 ? w >= 0 && r |=> <D> : w == 1 && r |=> (w,w));
  {
    update_region using Join(r, lvl, x) if v == 1 {
      v := x.f;
    }
  } while (v == 0);

}
