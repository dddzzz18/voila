


region Flag(id r, int alvl, id s, int lvl, memcell x, memcell y)
  guards { unique SFLAG; }
  interpretation {
       x.f |-> ?v && (v == 0 || v == 1)
    && (v == 0 ==> Join(s, lvl, y, 0) && lvl < alvl && SET@s)
    && (v == 1 ==> Join(s, lvl, y) && lvl < alvl)
  }
  state { v }
  actions { SFLAG: 0 ~> 1; }


procedure thread2(id r, int alvl, id s, int lvl, memcell x, memcell y)
  requires Flag(r, alvl, s, lvl, x, y, 0) && SFLAG@r;
{
  use_atomic using Flag(r, alvl, s, lvl, x, y) with SFLAG@r {
    // duplicateJoin(s, lvl, y, 0)
    assert Join(s, lvl, y, 0);
    inhale Join(s, lvl, y, 0);
    x.f := 1;
  }

  set_to_one(s, lvl, y);
}


procedure main(id dummy, int lvl, int alvl) returns (memcell x, memcell y, id r, id s, int ret)
  requires alvl > lvl >= 0 && LevelDummy(dummy, alvl);
  ensures Flag(r, alvl, s, lvl, x, y) && ret == 1;
{
  // x := new memcell(0)
  inhale x.f |-> _;
  x.f := 0;

  y, s := makeJoin(lvl);

  // duplicate Join(s, lvl, y)
  assert Join(s, lvl, y);
  inhale Join(s, lvl, y);

  // r := create Flag(alvl, s, lvl, x, y)
  inhale SFLAG@r;
  fold Flag(r, alvl, s, lvl, x, y);

  // duplicate Flag(r, alvl, s, lvl, x, y)
  assert Flag(r, alvl, s, lvl, x, y);
  inhale Flag(r, alvl, s, lvl, x, y);

  // fork thread2(r, alvl, s, lvl, x, y)
  exhale Flag(r, alvl, s, lvl, x, y, 0) && SFLAG@r;
  skip;

  wait(s, lvl, y);

  open_region using Flag(r, alvl, s, lvl, x, y) {
    ret := x.f;
  }
}


/** Join */

struct memcell {
  int f;
}

region Join(id r, int lvl, memcell x)
  guards {
    unique SET;
    duplicable Z;
  }
  interpretation { x.f |-> ?v && (v == 0 || v == 1) }
  state { v }
  actions { SET: 0 ~> 1; }


procedure makeJoin(int lvl) returns (memcell ret, id r)
  requires lvl >= 0;
  ensures  Join(r, lvl, ret, 0) && SET@r && Z@r;
{
  // ret := new memcell(0)
  inhale ret.f |-> _;
  ret.f := 0;

  // r := create Join(lvl, ret)
  inhale SET@r && Z@r;
  fold Join(r, lvl, ret);
}


abstract_atomic procedure set_to_one(id r, int lvl, memcell x)
  requires Join(r, lvl, x, 0) && SET@r;
  ensures  Join(r, lvl, x, 1) && SET@r;
{
  use_atomic using Join(r, lvl, x) with SET@r {
    x.f := 1;
  }
}


abstract_atomic procedure wait(id r, int lvl, memcell x)
  interference ?z in Set<int>(?u | true);
  requires Join(r, lvl, x, z) && Z@r;
  ensures  Join(r, lvl, x, 1) && Z@r;
{
  int v;
  make_atomic using Join(r, lvl, x) with Z@r;
    ensures Join(r, lvl, x, 1) && Z@r;
  {
    do
      invariant Join(r, lvl, x, ?w);
      invariant (v == 0 ? w >= 0 && r |=> <D> : w == 1 && r |=> (w,w));
    {
      open_region using Join(r, lvl, x) {
        v := x.f;
      }

      if (v == 1) {
        assert Join(r, lvl, x, 1);
        exhale r |=> <D>;
        inhale r |=> (1,1);
      }
    } while (v == 0);
  }
}


region LevelDummy(id r, int lvl)
  guards { duplicable LevelDummyG; }
  interpretation { true }
  state { 0 }
  actions {  }
