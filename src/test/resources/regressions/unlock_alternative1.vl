region Lock(id a, int* x)
  guards { duplicable G; }
  interpretation {
    x |-> ?v && v != 0 
  }
  state { v < 0 ? 0 : 1 }
  actions {
    G: 0 ~> Set(0, 1);
    G: 1 ~> Set(1, 0);
  }

predicate U(id a, int* x) {
  Lock(a, x, 0) && G@a
}

predicate L(id a, int* x) {
  Lock(a, x, 1) && G@a
}

abstract_atomic void unlock(int s, id a, int* x)
  interference s in Set(1) on a;
  requires L(a, x);
  ensures U(a, x);
{
  int nonDetNeg;
  
  unfold L(a, x);
  
  make_atomic
    using Lock(a, x, s) with G@a;
  {
    update_region
      using Lock(a, x, s);
    {
      havoc nonDetNeg;
      inhale nonDetNeg < 0;
      *x := nonDetNeg;
    }
  }
  
  fold U(a, x);
}

abstract_atomic void lock(int s, id a, int* x)
  interference s in Set(0, 1) on a;
  requires s == 0 ? U(a, x) : L(a, x);
  ensures L(a, x) && s == 0;
{
  int nonDetPos;
  bool b;

  if (s == 0) { unfold U(a, x); }
  else { unfold L(a, x); }
  
  make_atomic
    using Lock(a, x, s) with G@a;
  {
    do
      invariant Lock(a, x, _);
      invariant !b ==> a |=> <D>;
      invariant  b ==> a |=> (0, 1);
    {
      update_region
        using Lock(a, x, s);
      {
        havoc nonDetPos;
        inhale 0 < nonDetPos;
        b := CASifNeg(x, nonDetPos);
      }
    } while (!b);
  }
  
  fold L(a, x);
}

primitive_atomic bool CASifNeg(int* x, int thn)
  requires x |-> ?v;
  ensures  v < 0
              ? ret && x |-> thn
              : !ret && x |-> v;
