struct memcell {
  int f;
}

region Lock(id a, memcell x)
  guards { duplicable G; }
  interpretation {
    x.f |-> ?v && (v == 0 || v == 1)
  }
  state { v }
  actions {
    G: 0 ~> 1;
    G: 1 ~> 0;
  }

predicate Inv()

region CAPLock(id r, id a, memcell x)
  guards {
    duplicable Z;
    duplicable K; // [XXX] Wrong modifier: duplicable instead of unique
  }
  interpretation {
       Lock(a, x, ?v) && G@a
    && (v == 0 ==> K@r && Inv())
    && (v == 1 ==> true)
  }
  state { v }
  actions {
    Z: 0 ~> 1;
    K: 1 ~> 0;
  }




abstract_atomic procedure lock(id a, memcell x)
  interference ?s in Set(0, 1) on a;
  requires Lock(a, x, s) && G@a;
  ensures Lock(a, x, 1) && G@a && s == 0;

procedure non_atomic_lock01(id r, id a, memcell x)
  requires CAPLock(r, a, x, ?v) && (v == 0 || v == 1) && Z@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  CAPLock(r, a, x, ?w) && w == 1 && K@r && Z@r;
{
  use_atomic
    using CAPLock(r, a, x) with Z@r;
  {
    lock(a, x);
  }
}

procedure non_atomic_lock02(id r, id a, memcell x)
  requires CAPLock(r, a, x, ?v) && Z@r;
{
  use_atomic
    using CAPLock(r, a, x) with Z@r;
  {
    //:: ExpectedOutput(precondition_error:interference_error)
    lock(a, x);
  }
}
