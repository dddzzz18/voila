region Lock(id a, int* x)
  guards { duplicable G; }
  interpretation {
    x |-> ?v && (v == 0 || v == 1)
  }
  state { v }
  actions {
    G: 0 ~> Set(0, 1);
    G: 1 ~> Set(1, 0);
  }

predicate Inv() /* Invariant of CAP lock (left abstract) */

region CAPLock(id r, id a, int* x)
  guards {
    duplicable Z;
    duplicable K; // [XXX] Wrong modifier: duplicable instead of unique
  }
  interpretation {
       Lock(a, x, ?v) && G@a
    && (v == 0 ==> K@r && Inv())
    && (v == 1 ==> true)
  }
  state { v }
  actions {
    Z: 0 ~> Set(0, 1);
    K: 1 ~> Set(1, 0);
  }



primitive_atomic bool CAS(int* x, int now, int thn)
  requires x |-> ?v;
  ensures  v == now
              ? ret && x |-> thn
              : !ret && x |-> v;



abstract_atomic void unlock(id a, int* x)
  interference ?s in Set(1) on a;
  requires Lock(a, x, s) && G@a;
  ensures Lock(a, x, 0) && G@a;

void non_atomic_unlock01(id r, id a, int* x)
  requires CAPLock(r, a, x, ?v) && v == 1 && K@r;
  requires Inv();
{
  skip;

  // Havoc CAPLock region. Since K is incorrectly marked as duplicable,
  // holding K does not guarantee that the region's state won't change.

  use_atomic
    using CAPLock(r, a, x) with K@r;
  {
    //:: ExpectedOutput(precondition.error)
    unlock(a, x);
  }
}

void non_atomic_unlock02(id r, id a, int* x)
  requires CAPLock(r, a, x, ?v) && v == 1 && K@r;
  requires Inv();
  //:: ExpectedOutput(postcondition.error)
  ensures CAPLock(r, a, x, 0);
{
  use_atomic
    using CAPLock(r, a, x) with K@r;
  {
    unlock(a, x);
  }

  skip;
}

void non_atomic_unlock03(id r, id a, int* x)
  requires CAPLock(r, a, x, ?v) && v == 1 && K@r;
  requires Inv();
  //:: ExpectedOutput(postcondition.error)
  ensures CAPLock(r, a, x, 0);
{
  use_atomic
    using CAPLock(r, a, x) with K@r;
  {
    unlock(a, x);
  }
}

