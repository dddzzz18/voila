struct memcell {
  int f;
}

region Lock(id a, int lvl, memcell x)
  guards { duplicable G; }
  interpretation {
    x.f |-> ?v && 0 <= v // [XXX] Changed constraint: was "v == 0 || v == 1"
  }
  state { v }
  actions {
    G: 0 ~> 1;
    G: 1 ~> 0;
  }

predicate Inv()

//:: ExpectedOutput(region_interpretation_not_stable_error)
region CAPLock(id r, int alvl, id a, int lvl, memcell x)
  guards {
    duplicable Z;
    unique K;
  }
  interpretation {
       Lock(a, lvl, x, ?v) && lvl < alvl && G@a
    && (v == 0 ==> K@r && Inv())
    && (v == 1 ==> true)
  }
  state { v }
  actions {
    Z: 0 ~> 1;
    K: 1 ~> 0;
  }



abstract_atomic procedure unlock01(id a, int lvl, memcell x)
  interference ?s in Set(1) on a;
  requires Lock(a, lvl, x, s) && G@a;
{
  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    //:: ExpectedOutput(update-region_error:assertion_error)
    update_region
      using Lock(a, lvl, x);
    {
      x.f := -1;
    }
  }
}

abstract_atomic procedure unlock02(id a, int lvl, memcell x)
  interference ?s in Set(1) on a;
  requires Lock(a, lvl, x, s) && G@a;
{
  //:: ExpectedOutput(make-atomic_error:illegal_state_change_error)
  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    update_region
      using Lock(a, lvl, x);
    {
      x.f := 2;
    }
  }
}
