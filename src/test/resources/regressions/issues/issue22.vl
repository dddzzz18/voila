struct memcell {
  int f;
}

region Counter(id c, int lvl, memcell x)
  guards { duplicable G; }
  interpretation {
    x.f |-> ?n
  }
  state { n }
  actions {
    ?n, ?m | G: n ~> m;
  }

abstract_atomic procedure test03(id c, int lvl, memcell x)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n);
{
  open_region
    using Counter(c, lvl, x);
  {
    //:: ExpectedOutput(typechecker_error)
    x.f := n;
    x.f := n;
  }
}

abstract_atomic procedure test02(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n);
{
  //:: ExpectedOutput(typechecker_error)
  open_region
    using Counter(c, lvl, x);
  {
    ret := x.f;
  }

  skip;
}

abstract_atomic procedure test10(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n);
{
  assert true;

  open_region
    using Counter(c, lvl, x);
  {
    ret := x.f;
  }

  assert true;
}

procedure test01(id c, int lvl, memcell x)
  requires Counter(c, lvl, x) && G@c;
{
  int n;

  use_atomic
    using Counter(c, lvl, x) with G@c;
  {
    //:: ExpectedOutput(typechecker_error)
    n := x.f;
    x.f := n;
  }
}

procedure test05(id c, int lvl, memcell x)
  requires Counter(c, lvl, x) && G@c;
{
  int n;

  update_region
    using Counter(c, lvl, x);
  {
    //:: ExpectedOutput(typechecker_error)
    n := x.f;
    x.f := n;
  }
}

procedure test06(id c, int lvl, memcell x)
  requires Counter(c, lvl, x);
{
  int n;

  open_region
    using Counter(c, lvl, x);
  {
    n := x.f;
    assert x.f |-> ?v;
    assert v == n;
  }
}
