region Triple(id r, int lvl, triple x; int u, int v)
  guards { unique G; }
  interpretation { x.f1 |-> ?u && x.f2 |-> ?v && x.f3 |-> ?w && 0 < w }
  state { w <= u + v + w }
  actions {}

procedure test01(id r, int lvl, triple x)
  requires Triple(r, lvl, x, ?u, ?v, ?abs);
  ensures  u + v == 0 ==> abs;
{
  skip;
}

procedure test03(id r, int lvl, triple x)
  requires Triple(r, lvl, x, ?u, _, ?abs);
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures 0 < u ==> abs;
{
  skip;
}

procedure test02(id r, int lvl, triple x)
  requires Triple(r, lvl, x);
{
  assert Triple(r, lvl, x);
  assert Triple(r, lvl, x, _);
  assert Triple(r, lvl, x, _, _);
  assert Triple(r, lvl, x, _, _, _);
}

struct triple {
  int f1;
  int f2;
  int f3;
}
