struct cell {
  int value;
}



region R1(id r, cell x)
  guards {
    unique G1(int n);
  }
  interpretation { x.value |-> ?v }
  state { v }
  actions {
    ?n | G1(n): n ~> n + 1;
  }

procedure test01R1(id r, cell x)
  requires R1(r, x, ?v0) && G1(v0)@r;
  ensures  R1(r, x, ?v1) && v1 == v0;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  false;
{
  skip;
}

procedure test02R1(id r, cell x)
  requires R1(r, x, ?v0) && G1(v0+1)@r;
  ensures  R1(r, x, ?v1) && v0 <= v1 <= v0 + 1;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  v1 == v0;
{
  skip;
}

procedure test03R1(id r, cell x)
  requires R1(r, x, ?v0) && G1(v0+2)@r;
  ensures  R1(r, x, ?v1) && v0 <= v1 <= v0 + 2;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  v1 == v0 || v1 == v0 + 2;
{
  skip;
}



region R2(id r, cell x)
  guards {
    unique G2(int n);
  }
  interpretation { x.value |-> ?v }
  state { v }
  actions {
    ?n, ?m | m == n + 1 | G2(n): n ~> m;
  }

procedure test01R2(id r, cell x)
  requires R2(r, x, ?v0) && G2(v0)@r;
  ensures  R2(r, x, ?v1) && v1 == v0;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  false;
{
  skip;
}

procedure test02R2(id r, cell x)
  requires R2(r, x, ?v0) && G2(v0+1)@r;
  ensures  R2(r, x, ?v1) && v0 <= v1 <= v0 + 1;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  v1 == v0;
{
  skip;
}

procedure test03R2(id r, cell x)
  requires R2(r, x, ?v0) && G2(v0+2)@r;
  ensures  R2(r, x, ?v1) && v0 <= v1 <= v0 + 2;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  v1 == v0 || v1 == v0 + 2;
{
  skip;
}



region R3(id r, cell x)
  guards {
    unique G3(int n);
  }
  interpretation { x.value |-> ?v }
  state { v }
  actions {
    ?n, ?m | n < m | G3(n): n ~> m;
  }

procedure test01R3(id r, cell x)
  requires R3(r, x, ?v0) && G3(v0)@r;
  ensures  R3(r, x, ?v1) && v1 == v0;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  false;
{
  skip;
}

procedure test02R3(id r, cell x)
  requires R3(r, x, ?v0) && G3(v0+1)@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  R3(r, x, ?v1) && v0 <= v1 <= v0 + 1;
{
  skip;
}

procedure test03R3(id r, cell x)
  requires R3(r, x, ?v0) && G3(v0+2)@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  R3(r, x, ?v1) && v0 <= v1 <= v0 + 2;
{
  skip;
}



region R4(id r, cell x)
  guards {
    unique G4(int n);
  }
  interpretation { x.value |-> ?v }
  state { v }
  actions {
    ?n, ?m, ?k | n < m | G4(k): n ~> m;
  }

procedure test01R4(id r, cell x)
  requires R4(r, x, ?v0) && G4(v0)@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  R4(r, x, ?v1) && v1 == v0;
{
  skip;
}

procedure test02R4(id r, cell x)
  requires R4(r, x, ?v0) && G4(v0+1)@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  R4(r, x, ?v1) && v0 <= v1 <= v0 + 1;
{
  skip;
}

procedure test03R4(id r, cell x)
  requires R4(r, x, ?v0) && G4(v0+2)@r;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  R4(r, x, ?v1) && v0 <= v1 <= v0 + 2;
{
  skip;
}
