struct cell {
  int f;
}

procedure test01(cell c)
  requires c.f |-> _;
  ensures  c.f |-> _;
{
  assert c != null && c.f |-> _ && c != null;
  exhale (c != null && c.f |-> _) && c != null;
  inhale c != null && (c.f |-> _ && c != null);
}

predicate P(cell c) { c.f |-> _ }

/* Not yet supported: wildcards for in-arguments */
//procedure test02(cell c)
//  requires P(_);
//  ensures  P(_);
//{
//  skip;
//  unfold P(_);
//  fold P(_);
//}

region R(id r, int lvl, cell c; int v)
  guards { unique G; }
  interpretation { c.f |-> ?v }
  state { 0 }
  actions {}

procedure test03(id r, int lvl, cell c)
  requires R(r, lvl, c, _, ?a);
  ensures  R(r, lvl, c, _);
{
  unfold R(r, lvl, c, ?v, _);
  fold R(r, lvl, c, _, _);
  unfold R(r, lvl, c, v, a);
  fold R(r, lvl, c);
  //:: ExpectedOutput(unfold_error)
  unfold R(r, lvl, c, a, v);
}
