struct cell {
  int value;
}



region R1(id r, int lvl, cell x)
  guards { unique G1; }
  interpretation { x.value |-> ?v }
  state { v }
  actions { G1: 0 ~> 1; }

procedure test01R1(id r, int lvl, cell x)
  requires R1(r, lvl, x, 0) && G1@r;
  ensures  R1(r, lvl, x, _);
{
  int n;
  assume 0 <= n <= 1;

  use_atomic
    using R1(r, lvl, x) with G1@r;
  {
    x.value := n;
  }
}

procedure test02R1(id r, int lvl, cell x)
  requires R1(r, lvl, x, 0) && G1@r;
{
  //:: ExpectedOutput(use-atomic_error:illegal_state_change_error)
  use_atomic
    using R1(r, lvl, x) with G1@r;
  {
    x.value := -1;
  }
}



region R2(id r, int lvl, cell x)
  guards { unique G2(int n); }
  interpretation { x.value |-> ?v }
  state { v }
  actions { ?n | G2(n): n ~> n + 1; }

procedure test01R2(id r, int lvl, cell x)
  requires R2(r, lvl, x, ?v0) && G2(v0)@r;
  ensures  R2(r, lvl, x, _);
{
  use_atomic
    using R2(r, lvl, x) with G2(v0)@r;
  {
    x.value := v0 + 1;
  }
}

procedure test02R2(id r, int lvl, cell x)
  requires R2(r, lvl, x, ?v0) && G2(v0)@r;
{
  //:: ExpectedOutput(use-atomic_error:illegal_state_change_error)
  use_atomic
    using R2(r, lvl, x) with G2(v0)@r;
  {
    x.value := v0 - 1;
  }
}



region R3(id r, int lvl, cell x)
  guards { unique G3(int n); }
  interpretation { x.value |-> ?v }
  state { v }
  actions { ?n, ?m | n < m | G3(n): n ~> m; }

procedure test01R3(id r, int lvl, cell x)
  requires R3(r, lvl, x, ?v0) && G3(v0)@r;
  ensures  R3(r, lvl, x, _);
{
  int n;
  assume v0 <= n;

  use_atomic
    using R3(r, lvl, x) with G3(v0)@r;
  {
    x.value := n;
  }
}

procedure test02R3(id r, int lvl, cell x)
  requires R3(r, lvl, x, ?v0) && G3(v0)@r;
{
  int n;

  //:: ExpectedOutput(use-atomic_error:illegal_state_change_error)
  use_atomic
    using R3(r, lvl, x) with G3(v0)@r;
  {
    x.value := n;
  }
}



region R4(id r, int lvl, cell x)
  guards {
    unique G4(int n);
  }
  interpretation { x.value |-> ?v }
  state { v }
  actions {
    ?n, ?m, ?k | n < m | G4(k): n ~> m;
  }

procedure test01R4(id r, int lvl, cell x)
  requires R4(r, lvl, x, ?v0) && G4(v0)@r;
  ensures  R4(r, lvl, x, _);
{
  int n;
  assume v0 <= n;

  use_atomic
    using R4(r, lvl, x) with G4(v0)@r;
  {
    x.value := n;
  }
}

procedure test02R4(id r, int lvl, cell x)
  requires R4(r, lvl, x, ?v0) && G4(v0)@r;
{
  int n;

  //:: ExpectedOutput(use-atomic_error:illegal_state_change_error)
  use_atomic
    using R4(r, lvl, x) with G4(v0)@r;
  {
    x.value := n;
  }
}
