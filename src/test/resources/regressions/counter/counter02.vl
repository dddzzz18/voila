struct memcell {
  int f;
}

region Counter(id c, int lvl, memcell x)
  guards { duplicable G; }
  interpretation {
    x.f |-> ?n
  }
  state { n }
  actions {
    G: ?n ~> ?m;
  }



abstract_atomic procedure read01(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;
{
  open_region
    using Counter(c, lvl, x);
  {
    ret := x.f;
  }
}

abstract_atomic procedure read02(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Set<int>(n) on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;
{
  open_region
    using Counter(c, lvl, x);
  {
    ret := x.f;
  }
}



procedure read01_client01(id c, int lvl, memcell x) returns (int ret)
  requires Counter(c, lvl, x, ?n) && G@c;
  ensures Counter(c, lvl, x, ?m) && G@c;
  ensures ret == n;
{
  ret := read01(c, lvl, x);
}

procedure read01_client02(id c, int lvl, memcell x) returns (int ret)
  requires Counter(c, lvl, x, ?n) && G@c;
  ensures Counter(c, lvl, x, ?m) && G@c;
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures ret == n;
{
  skip;
  ret := read01(c, lvl, x);
}

procedure read01_client03(id c, int lvl, memcell x) returns (int ret)
  requires Counter(c, lvl, x, ?n) && G@c;
  ensures ret == n;
  //:: ExpectedOutput(postcondition_error:region_state_error)
  ensures Counter(c, lvl, x, n) && G@c;
{
  int v;
  v := read01(c, lvl, x);
  ret := v;
}



procedure read02_client01(id c, int lvl, memcell x) returns (int ret)
  requires Counter(c, lvl, x, ?n) && G@c; // TODO: Unstable, see Voila issue #15
{
  //:: ExpectedOutput(precondition_error:interference_error)
  ret := read02(c, lvl, x);
}

procedure read02_client02(id c, int lvl, memcell x) returns (int ret)
  // interference ?n in Set<int>(n) on c; // TODO: See Voila issue #14
  requires Counter(c, lvl, x, ?n) && G@c;      // TODO: Unstable, see Voila issue #15
  ensures ret == n;
  ensures Counter(c, lvl, x, n) && G@c;
{
  //:: ExpectedOutput(precondition_error:interference_error)
  ret := read02(c, lvl, x);
}

procedure read02_client03(id c, int lvl, memcell x) returns (int ret)
  requires Counter(c, lvl, x, ?n) && G@c; // TODO: Unstable, see Voila issue #15
{
  skip;
  //:: ExpectedOutput(precondition_error:interference_error)
  ret := read02(c, lvl, x);
}


region SeqCounter(id k, int alvl, id c, int lvl, memcell x)
  guards {
    unique S;
  }
  interpretation {
    Counter(c, lvl, x, ?n) && G@c && lvl < alvl
  }
  state { n }
  actions {
    S: ?n ~> ?m;
  }

region ParCounter(id k, int alvl, id c, int lvl, memcell x)
  guards {
    duplicable P;
  }
  interpretation {
    Counter(c, lvl, x, ?n) && G@c && lvl < alvl
  }
  state { n }
  actions {
    P: ?n ~> ?m;
  }

procedure read01_seqclient01(id k, int alvl,  id c, int lvl, memcell x) returns (int ret)
  requires SeqCounter(k, alvl,  c, lvl, x) && S@k;
  ensures  SeqCounter(k, alvl,  c, lvl, x) && S@k;
{
  skip;
  skip;

  use_atomic
    using SeqCounter(k, alvl,  c, lvl, x) with S@k;
  {
    ret := read01(c, lvl, x); // CALL OK
  }
}

procedure read01_parclient01(id k, int alvl,  id c, int lvl, memcell x) returns (int ret)
  requires ParCounter(k, alvl,  c, lvl, x) && P@k;
  ensures  ParCounter(k, alvl,  c, lvl, x) && P@k;
{
  skip;
  skip;

  use_atomic
    using ParCounter(k, alvl,  c, lvl, x) with P@k;
  {
    ret := read01(c, lvl, x); // CALL OK
  }
}

procedure read02_seqclient01(id k, int alvl,  id c, int lvl, memcell x) returns (int ret)
  requires SeqCounter(k, alvl,  c, lvl, x) && S@k;
  ensures  SeqCounter(k, alvl,  c, lvl, x) && S@k;
{
  skip;
  skip;

  use_atomic
    using SeqCounter(k, alvl,  c, lvl, x) with S@k;
  {
    ret := read02(c, lvl, x); // CALL OK
  }
}

procedure read02_parclient01(id k, int alvl,  id c, int lvl, memcell x) returns (int ret)
  requires ParCounter(k, alvl,  c, lvl, x) && P@k;
  ensures  ParCounter(k, alvl,  c, lvl, x) && P@k;
{
  skip;
  skip;

  use_atomic
    using ParCounter(k, alvl,  c, lvl, x) with P@k;
  {
    //:: ExpectedOutput(precondition_error:interference_error)
    ret := read02(c, lvl, x);
  }
}
