struct cell {
  int value;
}

region Cell(id r, cell c)
  guards { unique G; }
  interpretation { c.value |-> ?v }
  state { 0 <= v }
  actions { ?b1, ?b2 | G: b1 ~> b2; }

procedure test01(id r, cell c)
  requires Cell(r, c);
{
  int v1;
  int v2;

  open_region using Cell(r, c); { v1 := c.value; }
  open_region using Cell(r, c); { v2 := c.value; }

  //:: ExpectedOutput(assert_error:assertion_error)
  assert v1 == v2;
}

procedure test02(id r, cell c)
  requires Cell(r, c, ?b1);
  ensures  Cell(r, c, ?b2);
  //:: ExpectedOutput(postcondition_error:assertion_error)
  ensures  b1 == b2;
{
  skip;
}

procedure test03(id r, cell c)
  requires Cell(r, c) && G@r;
{
  int v1;
  int v2;

  open_region using Cell(r, c); { v1 := c.value; }
  open_region using Cell(r, c); { v2 := c.value; }

  //:: ExpectedOutput(assert_error:assertion_error)
  assert v1 == v2;
}

procedure test04(id r, cell c)
  requires Cell(r, c, ?b1) && G@r;
  ensures  Cell(r, c, ?b2) && G@r;
  ensures  b1 == b2;
{
  skip;
}

procedure test05(id r, cell c)
  requires Cell(r, c) && G@r;
{
  int v1;

  use_atomic
    using Cell(r, c) with G@r;
  {
    c.value := v1;
  }
}



region ICell(id r, cell c, int v)
  guards { unique IG; }
  interpretation { c.value |-> v }
  state { 0 <= v }
  actions { ?b1, ?b2 | IG: b1 ~> b2; }

procedure test11(id r, cell c, int v0)
  requires ICell(r, c, v0);
{
  int v1;
  int v2;

  open_region using ICell(r, c, v0); { v1 := c.value; }
  open_region using ICell(r, c, v0); { v2 := c.value; }

  assert v0 == v1 && v1 == v2;
}

procedure test12(id r, cell c, int v0)
  requires ICell(r, c, v0, ?b1);
  ensures  ICell(r, c, v0, ?b2);
  ensures  b1 == b2;
{
  skip;
}

procedure test13(id r, cell c, int v0)
  requires ICell(r, c, v0) && IG@r;
{
  int v1;
  int v2;

  open_region using ICell(r, c, v0); { v1 := c.value; }
  open_region using ICell(r, c, v0); { v2 := c.value; }

  assert v0 == v1 && v1 == v2;
}

procedure test14(id r, cell c, int v0)
  requires ICell(r, c, v0, ?b1) && IG@r;
  ensures  ICell(r, c, v0, ?b2) && IG@r;
  ensures  b1 == b2;
{
  skip;
}

procedure test15(id r, cell c, int v0)
  requires ICell(r, c, v0) && IG@r;
{
  int v1;

  //:: ExpectedOutput(use-atomic_error:illegal_state_change_error)
  use_atomic
    using ICell(r, c, v0) with IG@r;
  {
    c.value := v1;
  }
}
