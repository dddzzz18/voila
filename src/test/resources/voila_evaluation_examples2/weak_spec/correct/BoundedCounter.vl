
region BCounter(id r, int lvl, memcell x)
  guards { divisible INCREMENT; }
  interpretation {
    x.f |-> ?v && (v == 0 || v == 1 || v == 2)
  }
  state { v }
  actions { ?n, ?m | INCREMENT(1/4): n ~> m; }

procedure makeBCounter(id r, int lvl) returns (memcell ret)
  requires lvl >= 0;
  ensures BCounter(r, lvl, ret) && INCREMENT(1f)@r;
{
  memcell v;

  // v := new memcell(0);
  inhale v.f |-> ?w;
  v.f := 0;

  ret := v;

  // create BCounter(r, lvl, ret, 0);
  inhale INCREMENT(1f)@r;
  fold BCounter(r, lvl, ret, 0);
}

procedure incr(id r, int lvl, memcell x, frac p) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT(p)@r && p >= 1/4;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT(p)@r;
  ensures  p == 1f ==> ret == v0 && (v0 < 2 ? v1 == v0 + 1 : v1 == 0);
{
  int v;
  int w;
  bool b;

  do
    invariant BCounter(r, lvl, x, ?vi) && INCREMENT(p)@r && p >= 1/4;
    invariant p == 1f ==> b && v == v0 && (v0 < 2 ? vi == v0 + 1 : vi == 0);
  {
    open_region using BCounter(r, lvl, x) {
      v := x.f;
    }

    if (v < 2) {
      w := v + 1;
    } else {
      w := 0;
    }

    use_atomic using BCounter(r, lvl, x) with INCREMENT(1/4)@r {
      b := CAS(x, v, w);
    }

    assert p == 1f ==> v == v0;
  } while (!b);

  ret := v;
}

procedure read(id r, int lvl, memcell x, frac p) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT(p)@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT(p)@r;
  ensures  p == 1f ==> ret == v0 && v0 == v1;
{
  open_region using BCounter(r, lvl, x) {
    ret := x.f;
  }
}


primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

struct memcell {
  int f;
}
