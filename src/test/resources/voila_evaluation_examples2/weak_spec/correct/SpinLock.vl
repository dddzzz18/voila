
struct memcell {
  int f;
}

region SLock(id r, int lvl, memcell x)
  guards {
    duplicable LOCK;
    unique UNLOCK;
  }
  interpretation {
       x.f |-> ?v 
    && (v == 0 ==> UNLOCK@r)
  }
  state { v }
  actions {
    LOCK:   0 ~> 1;
    UNLOCK: 1 ~> 0;
    LOCK && UNLOCK: ?n ~> ?m;
  }

procedure makeLock(int lvl) returns (memcell ret, id r)
  requires lvl >= 0;
  ensures  SLock(r, lvl, ret) && LOCK@r;
{
  // ret := new memcell(0)\
  inhale ret.f |-> 0;

  // s := create SLock(lvl, x)
  havoc r;
  inhale LOCK@r && UNLOCK@r;
  fold SLock(r, lvl, ret);
}


procedure acquire(id r, int lvl, memcell x)
  requires SLock(r, lvl, x) && LOCK@r;
  ensures  SLock(r, lvl, x, 1) && LOCK@r && UNLOCK@r;
{
  bool b;

  do
    invariant SLock(r, lvl, x, ?vi) && LOCK@r;
    invariant b ==> vi == 1 && UNLOCK@r;
  {
    use_atomic using SLock(r, lvl, x) with LOCK@r {
      b := CAS(x, 0, 1);
    }
  } while (!b);
}

procedure release(id r, int lvl, memcell x)
  requires SLock(r, lvl, x, 1) && UNLOCK@r;
  ensures  SLock(r, lvl, x);
{
  use_atomic using SLock(r, lvl, x) with UNLOCK@r {
    x.f := 0;
  }
}

primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;
