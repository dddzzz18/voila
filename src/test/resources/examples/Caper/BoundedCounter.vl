// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/BoundedCounter.t
//

region BCounter(id r, int lvl, memcell x)
  guards { duplicable INCREMENT; }
  interpretation {
    x.f |-> ?v &&
    (v == 0 || v == 1 || v == 2)
  }
  state { v }
  actions {
    // Intended actions (not transitively closed):
    //   INCREMENT: ?n ~> n + 1;
    //   INCREMENT: 2 ~> 0;
    // Transitively closed action:
    //   INCREMENT: ?n ~> ?m;
    // However, it is currently to effectively repeat the state constraints from the interpretation.
    // Otherwise, Voila computes a too large interference context at, e.g. call site of incrAA in
    // the body of incrNA1.
    // The final action thus is:
    ?n, ?m | 0 <= n <= 2 && 0 <= m <= 2 | INCREMENT: n ~> m;
  }

procedure makeBCounter(int lvl) returns (memcell ret, id r)
  requires lvl >= 0;
  ensures BCounter(r, lvl, ret) && INCREMENT@r;
{
  ret := new memcell(0);
  r := new BCounter(lvl, ret) with INCREMENT;
}



procedure incr(id r, int lvl, memcell x) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= ret <= 2;
{
  int v;
  int w;
  bool b;

  do
    invariant BCounter(r, lvl, x) && INCREMENT@r;
    invariant 0 <= v <= 2;
  {
    open_region
      using BCounter(r, lvl, x);
    {
      v := x.f;
    }

    if (v < 2) {
      w := v + 1;
    } else {
      w := 0;
    }

    use_atomic
      using BCounter(r, lvl, x) with INCREMENT@r;
    {
      b := CAS(x, v, w);
    }
  } while (!b);

  ret := v;
}

procedure read(id r, int lvl, memcell x) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  ret == 0 || ret == 1 || ret == 2;
{
  open_region
    using BCounter(r, lvl, x);
  {
    ret := x.f;
  }
}

primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

struct memcell {
  int f;
}
