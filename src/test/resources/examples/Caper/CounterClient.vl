// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/CounterClient.t
//

struct cell {
  int value;
}

primitive_atomic procedure CAS(cell x, int now, int thn) returns (bool ret)
  requires x.value |-> ?v;
  ensures  v == now
              ?  ret && x.value |-> thn
              : !ret && x.value |-> v;

// ----- Counter Client -----

// Macro thread_incr's precondition such that it can be easily reused when encoding
// fork statements via exhales
macro thread_incr_PRE(r, x, s, y)
  Counter(r, x, _) && AUTH(1)@r && INCR@r && Join(s, y, r, x, 0) && SET@s;

procedure thread_incr(id r, cell x, id s, fjcell y)
  requires thread_incr_PRE(r, x, s, y);
  ensures  true;
{
  incr(r, x);
  set_to_one(s, y, r, x);
}

procedure parallel_incr() returns (id r, cell x)
  requires true;
  ensures  Counter(r, x, _) && CONT(2)@r && AUTH(-1-2)@r && INCR@r;
    // TODO: Caper can guarantee Counter(r, x, 2) because INCR is a fractional guard and after
    //       the two wait-calls, we hold the full INCR permission, which means that no other thread
    //       can modify the Counter region. See also issue #52.
{
  fjcell y1, y2;
  id s1, s2;

  r, x := makeCounter();

  // Duplicate Counter region assertion
  assert Counter(r, x);
  inhale Counter(r, x) && Counter(r, x) && Counter(r, x) && Counter(r, x);
  // Duplicate INCR@r
  assert INCR@r;
  inhale INCR@r;
  // Split off two AUTH(1)
  use AUTH_split(r, -1-1, 1);
  use AUTH_split(r, -1-2, 1);

  s1, y1 := make_join(r, x);
  s2, y2 := make_join(r, x);

  // Duplicate Join regions
  assert Join(s1, y1, r, x) && Join(s2, y2, r, x);
  inhale Join(s1, y1, r, x) && Join(s2, y2, r, x);

  // fork thread_incr(x, y1);
  exhale thread_incr_PRE(r, x, s1, y1);
  // fork thread_incr(x, y2);
  exhale thread_incr_PRE(r, x, s2, y2);

  wait(s1, y1, r, x);
  wait(s2, y2, r, x);

  // At this point, we know
  //   CONT(1)@r && CONT(1)@r && AUTH(-1-2)@r && Counter(r, x, _)
  // We want to conclude
  //   Counter(r, x, 2)
  // but that requires applying a few lemmas and using the definition of the Counter region
  use CONT_join(r, 1, 1); // Apply CONT(1) * CONT(1) ==> CONT(2)
  unfold Counter(r, x, ?n);
  use CONT_max1(r, 2, n); // Apply CONT(2) * CONT(-1-n) ==> 2 <= n
  use AUTH_max1(r, n, 2); // Apply AUTH(n) * AUTH(-1-2) ==> n <= 2
  fold Counter(r, x, 2);

  skip;
}


// ----- Counter Library -----

region Counter(id r, cell x)
  guards {
    duplicable INCR; // %INCR
    duplicable CONT(int n); // |CONT|
    duplicable AUTH(int n); // |AUTH|
  }
  interpretation {
//    n : x |-> n &*& n >= 0 &*& r@(CONT|-1-n| * AUTH|n|);
    x.value |-> ?n && 0 <= n && CONT(-1-n)@r && AUTH(n)@r
  }
  state { n }
  actions {
//    INCR[_] : n ~> m;
    ?n, ?m | INCR: n ~> m;
  }

// Encoding of counting guard algebras CONT and AUTH

macro counting_algebra_constraints(n, m)
  (0 <= n && 0 <= m) ||
  (n < 0 && 0 <= m && n + m < 0) ||
  (m < 0 && 0 <= n && n + m < 0);

/* lemma */ procedure CONT_split(id r, int n, int m)
  requires CONT(n + m)@r;
  requires counting_algebra_constraints(n, m);
  ensures  CONT(n)@r && CONT(m)@r;

/* lemma */ procedure CONT_join(id r, int n, int m)
  requires CONT(n)@r && CONT(m)@r;
  requires counting_algebra_constraints(n, m);
  ensures  CONT(n + m)@r;

/* lemma */ procedure CONT_false1(id r, int n) // TODO: Derivable from CONT_split and CONT_join?
  requires CONT(-1)@r && CONT(n)@r && 0 < n;
  ensures  false;

/* lemma */ procedure CONT_max1(id r, int n, int m) // TODO: Derivable from CONT_split and CONT_join?
  requires CONT(n)@r && CONT(-1-m)@r && 0 <= n && 0 <= m;
  ensures  CONT(n)@r && CONT(-1-m)@r;
  ensures  n <= m;

/* lemma */ procedure AUTH_split(id r, int n, int m)
  requires AUTH(n + m)@r;
  requires counting_algebra_constraints(n, m);
  ensures  AUTH(n)@r && AUTH(m)@r;

/* lemma */ procedure AUTH_join(id r, int n, int m)
  requires AUTH(n)@r && AUTH(m)@r;
  requires counting_algebra_constraints(n, m);
  ensures  AUTH(n + m)@r;

/* lemma */ procedure AUTH_false1(id r, int n) // TODO: Derivable from AUTH_split and AUTH_join?
  requires AUTH(-1)@r && AUTH(n)@r && 0 < n;
  ensures  false;

/* lemma */ procedure AUTH_max1(id r, int n, int m) // TODO: Derivable from AUTH_split and AUTH_join?
  requires AUTH(n)@r && AUTH(-1-m)@r && 0 <= n && 0 <= m;
  ensures  AUTH(n)@r && AUTH(-1-m)@r;
  ensures  n <= m;

// Functionality

procedure makeCounter() returns(id r, cell x)
  requires true;
  ensures  Counter(r, x, _) && INCR@r && AUTH(-1)@r;
    // TODO: Caper ensures Counter(r, x, 0) because there, INCR is a fractional guard (rather than
    //       'duplicable' as it is here) and since we have full permission to INCR, nobody else can
    //       modify the region. See also issue #52.
{
  // x := alloc(1);
  inhale x.value |-> _;

  x.value := 0;

  // Create region Counter(r, x)
  inhale INCR@r && CONT(-1)@r && AUTH(-1)@r;
  use AUTH_split(r, -1, 0); // Apply AUTH(-1) ==> AUTH(-2) * AUTH(1)
  fold Counter(r, x);
}

// TODO: Encode example TaDA-style (similar to Lock vs CAPLock):
//         1. Abstract-atomic incr that manipulates a "permissive" Cell region
//         2. Counter region plus non-atomic incr on top of Cell and its incr

procedure incr(id r, cell x)
  requires Counter(r, x, _) && AUTH(1)@r && INCR@r;
  ensures  Counter(r, x, _) && CONT(1)@r && INCR@r;
{
  bool b;
  int v;

  do
    invariant Counter(r, x, _) && INCR@r;
    invariant !b ? AUTH(1)@r : CONT(1)@r;
  {
    // v := [x];
    open_region
      using Counter(r, x);
    {
      v := x.value;
    }

    // b := CAS(x, v, v + 1);
    use_atomic
      using Counter(r, x) with INCR@r;
    {
      b := CAS(x, v, v + 1);

      // ghost
      if (b) {
        // Trade with region: AUTH(1) for CONT(1)
        use AUTH_join(r, v, 1); // Apply AUTH(v) * AUTH(1) ==> AUTH(v + 1)
        use CONT_split(r, -1-(v+1), 1); // Apply CONT(-1-v) ==> CONT(-1-(v+1)) * CONT(1)
      }
    }
  } while (!b);
}

// Fork Join Library
// (I wouldn't call it a library, though, since it is tied to the Counter region)

struct fjcell {
  int value;
  bool _payload; // ghost field to resolve nondeterministic choice (disjunction) in Join's interpretation
}

region Join(id s, fjcell y, id r, cell x)
  guards {
    unique SET;
    unique JOIN;
  }
  interpretation {
//    0 : y |-> 0;
//    1 : y |-> 1 &*& (s@JOIN \/ Counter(r,x,_) &*& r@(CONT|1| * INCR[p]));
    y.value |-> ?n && (n == 0 || n == 1) &&
    y._payload |-> ?loaded &&
    (n == 1 ==>
      (loaded ? Counter(r, x, _) && CONT(1)@r && INCR@r : JOIN@s))
  }
  state { n }
  actions {
    SET: 0 ~> 1;
  }

procedure make_join(id r, cell x) returns (id s, fjcell y)
  requires Counter(r, x, _);
  ensures  Join(s, y, r, x, 0) && SET@s && JOIN@s;
{
  // y := alloc(1);
  inhale y.value |-> _;

  y.value := 0;

  // Create region Join(s, y, r, x, 0)
  inhale SET@s && JOIN@s;
  inhale y._payload |-> true;
  fold Join(s, y, r, x, 0);
}

procedure set_to_one(id s, fjcell y, id r, cell x)
  requires Counter(r, x, _) && CONT(1)@r && INCR@r && Join(s, y, r, x, 0) && SET@s;
  ensures  Join(s, y, r, x, 1);
{
  // [y] := 1;
  use_atomic
    using Join(s, y, r, x) with SET@s;
  {
    y.value := 1;

    // ghost
    exhale y._payload |-> _;
    inhale y._payload |-> true;
  }
}

procedure wait(id s, fjcell y, id r, cell x)
  requires Counter(r, x, _) && JOIN@s && Join(s, y, r, x, _);
  ensures  Counter(r, x, _) && CONT(1)@r && INCR@r && Join(s, y, r, x, 1);
{
  int v;

  do
    invariant Counter(r, x, _) && Join(s, y, r, x, ?j);
    invariant v == 0 ? JOIN@s : CONT(1)@r && INCR@r && j == 1;
  {
    // v := [y];
    open_region
      using Join(s, y, r, x);
    {
      v := y.value;

      // ghost
      if (v != 0) {
        // TODO: Next block is "only" necessary in order to learn that y._payload |-> true,
        //       which follows from the uniqueness of JOIN@s.
        fold Join(s, y, r, x);
        use_region_interpretation Join(s, y, r, x);
        unfold Join(s, y, r, x);

        exhale y._payload |-> true;
        inhale y._payload |-> false;
      }
    }
  } while (v == 0);
}
