// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/ForkJoin.t
//

struct memcell {
  int f;
}

region Join(id r, int lvl, memcell x)
  guards { unique SET; }
  interpretation { x.f |-> ?v && (v == 0 || v == 1) }
  state { v }
  actions { SET: 0 ~> 1; }

// TODO: make_join()

procedure set_to_one(id r, int lvl, memcell x)
  requires Join(r, lvl, x, 0) && SET@r;
  ensures  Join(r, lvl, x, 1) && SET@r;
{
  use_atomic
    using Join(r, lvl, x) with SET@r;
  {
    x.f := 1;
  }
}

procedure wait(id r, int lvl, memcell x)
  requires Join(r, lvl, x, ?z);
  ensures  Join(r, lvl, x, 1);
{
  int v;

  do
    invariant Join(r, lvl, x, ?w);
    invariant (v == 0 ? w >= 0 : w == 1);
  {
    open_region
      using Join(r, lvl, x);
    {
      v := x.f;
    }
  } while (v == 0);
}
