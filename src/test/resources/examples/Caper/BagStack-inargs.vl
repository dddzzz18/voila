// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/BagStack.t
//

// TODO: Caper's BagList forces a node's value (int v) and successor (node z) to be invariant.
//       This should also be possible in Voila: by making the arguments in- rather than
//       out-arguments. However, Voila doesn't support existentially quantified in-arguments,
//       so we would have to introduce and maintain additional ghost fields.

predicate Inv(int v)

struct bag {
  node hd;
}

region Bag(id r, int lvl, bag x)
  ghost_fields {
    // All ghost fields model variables that are existentially quantified in Caper
    id _hd_id;
    int _hd_level;
    int _hd_value;
    node _hd_next;
  }
  guards { duplicable Z; }
  interpretation {
//    0 : x |-> head &*& BagList(bl,head,_,_,0) &*& bl@OWN;
    x.hd |-> ?y &&
    r._hd_id |-> ?y_r &&
    r._hd_level |-> ?y_lvl && y_lvl < lvl &&
    r._hd_value |-> ?y_val &&
    r._hd_next |-> ?y_nxt &&
    BagList(y_r, y_lvl, y, y_val, y_nxt, 0) && OWN@y_r
  }
  state { 0 }
  actions {}

struct node {
  int value;
  node next;
}

region BagList(id r, int lvl, node y, int v, node z)
  ghost_fields {
    int _absstate;
    id _next_id;
    int _next_level;
    int _next_value;
    node _next_node;
  }
  guards { unique OWN; }
  interpretation {
//    0 : y = 0 ? true : y |-> val &*& (y + 1) |-> z &*& BagList(nxtbl,z,_,_,0) &*& nxtbl@OWN &*& bagInvariant(val);
//    1 :      s@OWN &*& y |-> val &*& (y + 1) |-> z &*& BagList(nxtbl,z,_,_,_);
    r._absstate |-> ?a &&
    // Note: points-to predicates could also be declared inside the cases for 'a', as done in Caper.
    //       Currently not done, however, due to Voila issue #40.
    y.value |-> v &&
    y.next |-> z &&
    r._next_id |-> ?z_r &&
    r._next_level |-> ?z_lvl && z_lvl < lvl &&
    r._next_value |-> ?z_val &&
    r._next_node |-> ?z_nxt &&
    (  a == 0 ? (y != null ==> BagList(z_r, z_lvl, z, z_val, z_nxt, 0) && OWN@z_r && Inv(v))
     : a == 1 ? (BagList(z_r, z_lvl, z, z_val, z_nxt) && OWN@r)
     : false)
  }
  state { a }
  actions { OWN: 0 ~> 1; }


procedure push(id r, int lvl, bag x, int v)
  requires Bag(r, lvl, x, 0) && Inv(v) && Z@r;
  ensures  Bag(r, lvl, x, 0);
{
  node y;
  int b;
  node t;
  id y_r; // ghost
  int y_lvl; // ghost

//  y := alloc(2);
// [y] := v;
// [y+1] := null;
  y := new node(v, null);

  do
//    invariant Bag(r,x,0) &*& (cr = 0 ? y |-> v &*& y+1 |-> _ &*& bagInvariant(v) : true);
    invariant Bag(r, lvl, x, 0) && Z@r;
    invariant b == 0 ==> y.value |-> v && y.next |-> _ && Inv(v);
  {
//	  t := [x];
    open_region
      using Bag(r, lvl, x);
    {
      t := x.hd;
    }

//    [y + 1] := t;
    y.next := t;

//    cr := CAS(x,t,y);
    use_atomic
      using Bag(r, lvl, x) with Z@r;
    {
      // Bind id/level/value t_r/t_lvl/t_val of current head node t
      assert r._hd_id |-> ?t_r;
      assert r._hd_level |-> ?t_lvl;
      assert r._hd_value |-> ?t_val;
      assert r._hd_next |-> ?t_nxt;

      b := CAS_hd(x, t, y);

      // If push succeeded, perform various ghost operations
      if (b == 1) {
//      Create new region BagList(y_r, y_lvl, y);
        y_r := new BagList(y_lvl, y, v, t) with OWN {
          y_r._absstate := 0; // Set new region's state to 0
          // Set next node's ghost fields
          y_r._next_id := t_r;
          y_r._next_level := t_lvl;
          y_r._next_value := t_val;
          y_r._next_node := t_nxt;
          inhale lvl > y_lvl > t_lvl; // Level of the new head is between the bag level and the old head level
        }

        // Update r's ghost fields to reflect that the new head of the bag is y
        r._hd_id := y_r;
        r._hd_level := y_lvl;
        r._hd_value := v;
        r._hd_next := t;
      }
    }
  } while (b == 0);
}


procedure popCAS(id r, int lvl, bag x,
                 id t_r, int t_lvl, node t, int v,
                 id t2_r, int t2_lvl, node t2, int t2_val, node t2_nxt
                ) returns (int success)
  requires Bag(r, lvl, x, 0) && BagList(t_r, t_lvl, t, v, t2) && BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt) && t != null && Z@r;
  requires t_lvl > t2_lvl;
  ensures success == 0 || success == 1;
  ensures success == 1 ==> Inv(v);
  ensures Z@r;
{
  use_atomic
    using Bag(r, lvl, x) with Z@r;
  {
    success := CAS_hd(x, t, t2);

    // If pop succeeded, perform various ghost operations
    if (success == 1) {
      // Bind current ghost field values
      assert r._hd_id |-> ?t_r0 && r._hd_level |-> ?t_lvl0 && r._hd_value |-> ?t_val0 && r._hd_next |-> ?t_nxt0;
      // Update r's ghost fields to reflect that the new head of the bag is t2
      r._hd_id := t2_r;
      r._hd_level := t2_lvl;
      r._hd_value := t2_val;
      r._hd_next := t2_nxt;

      // The following equalities can be proved by Caper, but currently not by Voila.
      // In Caper, they are implied by x.hd |-> t from (right before) the successful CAS.
      // See also issue #16.
      assume t_r0 == t_r && t_lvl0 == t_lvl &&  t_val0 == v &&  t_nxt0 == t2;

      //:: UnexpectedOutput(assert_error, /voila/issue/107/)
      assert BagList(t_r, t_lvl, t, v, t2, 0); // [DEBUG]
        // Knowing that the region BagList(t_r, t_lvl, t, v, t2), which we got from the precondition,
        // is in state 0 requires knowing that it is a duplicate of the previous head, i.e.
        // of BagList(t_r0, t_lvl0, t, t_val0, t_nxt0, 0).

      use_atomic
        /* TODO: Reconsider the use of rule use-atomic here.
         *       We want to temporarily open the BagList region in order to change its ghost state,
         *       and afterwards check that the state change was permitted.
         *       In TaDA, this might be done via a view shift instead of use-atomic, because the latter expects the
         *       execution of a real atomic operation, and it is not yet fully clear how our ghost code could be
         *       represented in a corresponding TaDA proof.
         */
        using BagList(t_r, t_lvl, t, v, t2) with OWN@t_r;
      {
        // Bind current ghost field values
        assert t_r._next_id |-> ?t2_r0 && t_r._next_level |-> ?t2_lvl0 && t_r._next_value |-> ?t2_val0 && t_r._next_node |-> ?t2_nxt0;
        //assume t2_r0 == t2_r && t2_lvl0 == t2_lvl; // Currently not provable, see above

        assert t.value |-> v && Inv(v); // [DEBUG]

        assert t_r._absstate |-> 0; // [DEBUG]
        t_r._absstate := 1; // Update abstract state of region t_r in order to free OWN@t2_r and Inv(v)
      }
    }
  }
}

procedure pop(id x_r, int x_lvl, bag x) returns (int status, int ret)
  requires Bag(x_r, x_lvl, x, 0) && Z@x_r;
//  ensures ret = 0 ? Bag(r,x,0) : Bag(r,x,0) &*& bagInvariant(ret);
  ensures  status == 1 ? Bag(x_r, x_lvl, x, 0) && Inv(ret) : Bag(x_r, x_lvl, x, 0);
  ensures  status == -1 || status == 1;
{
  node t;
  node t2;
  id t_r; // ghost
  int t_lvl; // ghost
  int t_val; // ghost
  node t_nxt; // ghost
  id t2_r; // ghost
  int t2_lvl; // ghost
  int t2_val; // ghost
  node t2_nxt; // ghost

  status := 0;
    //  0: Keep trying
    // -1: Bag was empty
    //  1: Pop succeeded

  while (status == 0)
    invariant -1 <= status <= 1;
//    invariant Bag(r,x,0) &*& (cr = 0 ? true : BagList(rt,t,v,t2,_) &*& t != 0 &*& bagInvariant(v));
    invariant Bag(x_r, x_lvl, x, 0) && Z@x_r;
    invariant status == 1 ==>
                t != null && t_lvl < x_lvl && BagList(t_r, t_lvl, t, t_val, t2, _) && Inv(t_val);
  {
//    t := [x];
    open_region
      using Bag(x_r, x_lvl, x);
    {
      t := x.hd;

      // Update t_r/t_lvl to be the region id/level of the bag's head node t
      t_r   := x_r._hd_id;
      t_lvl := x_r._hd_level;
      t_val := x_r._hd_value;
      t_nxt := x_r._hd_next;

      // Manually duplicate BagList(t_r, ...), see issue #89.
      // At the end of the current open_region, one instance goes back into Bag(x_r, ...),
      // but the other one remains accessible.
      assert BagList(t_r, t_lvl, t, t_val, t_nxt);
      inhale BagList(t_r, t_lvl, t, t_val, t_nxt);
    }

//    if (t = 0) {
//      return 0;
//    }
    if (t == null) {
      status := -1;
    } else {
//      t2 := [t + 1];
      open_region
        using BagList(t_r, t_lvl, t, t_val, t_nxt);
      {
        t2 := t.next;

        // Store t2's (i.e. t.next's) ghost fields in local variables
        t2_r   := t_r._next_id;
        t2_lvl := t_r._next_level;
        t2_val := t_r._next_value;
        t2_nxt := t_r._next_node;

        assert t_nxt == t2; // [DEBUG]

        // Manually duplicate BagList(t2_r, ...)
        assert BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt);
        inhale BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt);
      }

//      cr := popCAS(x,t,t2);

      // Duplicate region assertions, since popCAS consumes them.
      // Alternative (until Voila automatically duplicates region assertions): change contract of popCAS.
      assert Bag(x_r, x_lvl, x, 0) && BagList(t_r, t_lvl, t, t_val, t2) && BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt);
      inhale Bag(x_r, x_lvl, x, 0) && BagList(t_r, t_lvl, t, t_val, t2) && BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt);

      status := popCAS(x_r, x_lvl, x, // Bag(x_r, x_lvl, x)
                       t_r, t_lvl, t, t_val, // BagList(t_r, t_lvl, t, t_val)
                       t2_r, t2_lvl, t2, t2_val, t2_nxt); // BagList(t2_r, t2_lvl, t2, t2_val, t2_nxt)
    }
  }

  if (status == 1) {
//    ret := [t];
//    return ret;
    open_region
      using BagList(t_r, t_lvl, t, t_val, t2);
    {
      ret := t.value;
    }
  }
}

primitive_atomic procedure CAS_hd(bag x, node now, node thn) returns (int success)
  requires x.hd |-> ?v;
  ensures  success == 0 || success == 1;
  ensures  v == now
              ? success == 1 && x.hd |-> thn
              : success == 0 && x.hd |-> v;
