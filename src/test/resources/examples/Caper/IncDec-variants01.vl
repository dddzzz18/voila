region IncDec(id r, memcell x)
  guards {
    unique INC;
    unique DEC;
  }
  interpretation {
    x.val |-> ?n
  }
  state { n }
  actions {
    INC: ?m1 ~> Set(?t1 | m1 <= t1);
    DEC: ?m2 ~> Set(?t2 | t2 <= m2);
    // not supported yet, but not needed here:
    //INC * DEC : n ~> m;
  }


// TODO: Should return the last read value (i.e. v).
//       However, 'ret := v' as the final statement currently "destroys" the atomic triple.
//       Could make 'return v' a ghost statement that assigns to 'ret'.
//       Could try to include 'ret := v' inside make_atomic.
abstract_atomic void increment(id r, memcell x, int k)
  interference ?v0 in Set(?t | t <= v0) on r;
  requires IncDec(r, x,  v0) && INC@r && k > 0;
  ensures  IncDec(r, x, ?v1) && INC@r && v1 == v0 + k;
{
  bool b;
  int v;

  make_atomic
    using IncDec(r, x) with INC@r;
  {
    do
      invariant IncDec(r, x);
      invariant !b ==> r |=> <D>;
      invariant  b ==> r |=> (v, v + k) && v <= v0;
    {
      open_region
        using IncDec(r, x);
      {
        // v := [x];
        v := x.val;
      }

      update_region
        using IncDec(r, x);
      {
        b := CAS(x, v, v + k);
      }
    } while (!b);
  }

  //return v;
  //ret := v; // See comment above
}

// TODO: Should return the last read value (i.e. v), see comment above
abstract_atomic void decrement(id r, memcell x, int k)
  interference ?v0 in Set(?t | v0 <= t) on r;
  requires IncDec(r, x,  v0) && DEC@r && k > 0;
  ensures  IncDec(r, x, ?v1) && DEC@r && v1 == v0 - k;
{
  bool b;
  int v;

  make_atomic
    using IncDec(r, x) with DEC@r;
  {
    do
      invariant IncDec(r, x);
      invariant !b ==> r |=> <D>;
      invariant  b ==> r |=> (v, v - k) && v0 <= v;
    {
      open_region
        using IncDec(r, x);
      {
        // v := [x];
        v := x.val;
      }

      update_region
        using IncDec(r, x);
      {
        b := CAS(x, v, v - k);
      }
    } while (!b);
  }

  //return v;
  //ret := v; // See comment above
}




struct memcell {
  int val;
}

primitive_atomic bool CAS(memcell x, int now, int thn)
  requires x.val |-> ?v;
  ensures  v == now
              ? ret && x.val |-> thn
              : !ret && x.val |-> v;
