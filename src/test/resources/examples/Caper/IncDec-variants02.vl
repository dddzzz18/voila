region Cell(id s, memcell x)
  guards { unique G; }
  interpretation { x.val |-> ?v }
  state { v }
  actions {
    G: ?m ~> Int;
  }

// Basically a simplified version of the spinCAS used in BoundedReadWriteLock-variants03.vl
// TODO: Should return the last read value (i.e. v).
abstract_atomic void spinIncBy(id s, memcell x, int k, set<int> from)
  interference ?v0 in from on s;
  requires Cell(s, x, v0) && G@s;
  requires k != 0; // Needed because of Voila issue #8
  ensures  Cell(s, x, ?v1) && G@s;
  ensures  v1 == v0 + k;
{
  int v;
  bool b;

  make_atomic
    using Cell(s, x) with G@s;
  {
    do
      invariant Cell(s, x);
      invariant !b ==> s |=> <D>;
      invariant  b ==> s |=> (v, v + k) && v in from;
    {
      open_region
        using Cell(s, x);
      {
        v := x.val;
      }

      update_region
        using Cell(s, x);
      {
        b := CAS(x, v, v + k);
      }
    } while (!b);
  }

  // ret := v
}



region IncDec(id r, id s, memcell x)
  guards {
    unique INC;
    unique DEC;
  }
  interpretation { Cell(s, x, ?n) && G@s }
  state { n }
  actions {
    INC: ?m1 ~> Set(?t1 | m1 <= t1);
    DEC: ?m2 ~> Set(?t2 | t2 <= m2);
    // not supported yet, but not needed here:
    //INC * DEC : n ~> m;
  }

// TODO: Should return the return value of spinIncBy, see comment above
void increment(id r, id s, memcell x, int k)
  requires IncDec(r, s, x, ?v0) && INC@r && k > 0;
  ensures  IncDec(r, s, x, ?v1) && INC@r && v1 <= v0 + k;
{
  use_atomic
    using IncDec(r, s, x) with INC@r;
  {
    spinIncBy(s, x, k, Set(?t | t <= v0));
  }
}

// TODO: Should return the last read value (i.e. v), see comment above
void decrement(id r, id s, memcell x, int k)
  requires IncDec(r, s, x, ?v0) && DEC@r && k > 0;
  ensures  IncDec(r, s, x, ?v1) && DEC@r && v1 >= v0 - k;
{
  use_atomic
    using IncDec(r, s, x) with DEC@r;
  {
    spinIncBy(s, x, -k, Set(?t | v0 <= t));
  }
}




struct memcell {
  int val;
}

primitive_atomic bool CAS(memcell x, int now, int thn)
  requires x.val |-> ?v;
  ensures  v == now
              ? ret && x.val |-> thn
              : !ret && x.val |-> v;
