// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/BagStack.t
//

// TODO: Caper's BagList forces a node's value (int v) and successor (node z) to be invariant.
//       This should also be possible in Voila: by making the arguments in- rather than
//       out-arguments. However, Voila doesn't support existentially quantified out-arguments,
//       so we would have to introduce and maintain additional ghost fields.

predicate Inv(int v)

struct bag {
  node hd;
  id _nextid; // ghost
}

region Bag(id r, bag x)
  guards { duplicable Z; }
  interpretation {
//    0 : x |-> head &*& BagList(bl,head,_,_,0) &*& bl@OWN;
    x.hd |-> ?y && x._nextid |-> ?y_r && BagList(y_r, y, _, _, 0) && OWN@y_r
  }
  state { 0 }
  actions {}

struct node {
  int value;
  node next;
  int _absstate; // ghost
  id _nextid;   // ghost
}

region BagList(id r, node y; int v, node z)
  guards { unique OWN; }
  interpretation {
//    0 : y = 0 ? true : y |-> val &*& (y + 1) |-> z &*& BagList(nxtbl,z,_,_,0) &*& nxtbl@OWN &*& bagInvariant(val);
//    1 :      s@OWN &*& y |-> val &*& (y + 1) |-> z &*& BagList(nxtbl,z,_,_,_);
    y._absstate |-> ?a &&
    // TODO: The next three fields should be declared inside the cases for 'a',
    //       but that currently results in 'v' etc. being bound multiple times
    //       See also Voila issue #40.
    y.value |-> ?v &&
    y.next |-> ?z &&
    y._nextid |-> ?z_r &&
    (  a == 0 ?
        (y != null ==>
//            y.value |-> ?v && y.next |-> ?z && y._nextid |-> ?z_r &&
            BagList(z_r, z, _, _, 0) && OWN@z_r && Inv(v))
     : a == 1 ?
//        (y.value |-> ?v && y.next |-> ?z && y._nextid |-> ?z_r &&
         (BagList(z_r, z, _, _, 0) && OWN@r)
     : false)
  }
  state { a }
  actions { OWN: 0 ~> Set(0, 1); }

procedure push(id r, bag x, int v)
  requires Bag(r, x, 0) && Inv(v);
  ensures  Bag(r, x, 0);
{
  node y;
  int b;
  node t;
  id y_r; // ghost

//  y := alloc(2);
  inhale y.value |-> _;
  inhale y.next |-> _;

//  [y] := v;
  y.value := v;
  y.next := null;

  do
//    invariant Bag(r,x,0) &*& (cr = 0 ? y |-> v &*& y+1 |-> _ &*& bagInvariant(v) : true);
    invariant Bag(r, x, 0);
    invariant b == 0 ==> y.value |-> v && y.next |-> _ && Inv(v);
  {
//	  t := [x];
    open_region
      using Bag(r, x);
    {
      t := x.hd;
    }

//    [y + 1] := t;
    y.next := t;

//    cr := CAS(x,t,y);
    use_atomic
      using Bag(r, x) with Z@r;
    {
      assert x._nextid |-> ?t_r; // ghost: Bind region id t_r of current head node t

      b := CAS(x, t, y);

      // If push succeeded, perform various ghost operations
      if (b == 1) {
        inhale y._absstate |-> 0;  // Choose new region's state to be 0
        inhale y._nextid |-> t_r;  // Choose next node's id to be t_r
        inhale OWN@y_r;
        fold BagList(y_r, y);      // Close the new region

        exhale x._nextid |-> _;   // Update x._nextid to reflect that the new head ...
        inhale x._nextid |-> y_r; // ... of the bag is y, whose region id is y_r
      }
    }
  } while (b == 0);
}

procedure popCAS(id r, bag x, id t_r, node t, id t2_r, node t2) returns (int success)
  requires Bag(r, x, 0) && BagList(t_r, t, ?v, t2) && BagList(t2_r, t2) && t != null;
  ensures success == 0 || success == 1;
  ensures success == 1 ==> Inv(v);
{
  use_atomic
    using Bag(r, x) with Z@r;
  {
    success := CAS(x, t, t2);

    // If pop succeeded, perform various ghost operations
    if (success == 1) {
      exhale x._nextid |-> ?t_r0; // Update x._nextid to reflect that the new head ...
      inhale x._nextid |-> t2_r;  // ... of the bag is t2, whose region id is t2_r

      assume t_r0 == t_r; // Provable in Caper (but not by Voila). Probably implied by x.hd |-> t
                          // from (before) the successful CAS.

      assert BagList(t_r, t, v, t2, 0); // Knowing that the region's state is 0 requires
                                        // knowing that t_r0 == t_r.

      exhale BagList(t_r, t); // TODO: We now hold two copies of region BagList(t_r, t).
                              //       In order to avoid contradictions between the two copies
                              //       (further down, after updating t._absstate), we exhale one
                              //       copy here.

      use_atomic
        /* TODO: Reconsider the use of rule use-atomic here.
         *       What we want: temporarily open the BagList region in order to change its state
         *       and afterwards check that the state change was permitted.
         *       However: TaDA's use-atomic expects the execution of a real atomic operation,
         *       but we only perform a ghost state update. My *guess* is that such a region state
         *       change is achieved in TaDA/Caper by doing a view shift.
         */
        using BagList(t_r, t) with OWN@t_r;
      {
        assert t._nextid |-> ?t2_r0;
        assume t2_r0 == t2_r;     // See above
        exhale t._absstate |-> 0; // Update abstract state of region t_r in order ...
        inhale t._absstate |-> 1; // ... to free OWN@t2_r and Inv(v)
      }

      assert BagList(t2_r, t2, _, _, 0); // See above
    }
  }
}

procedure pop(id x_r, bag x) returns (int status, int ret)
  requires Bag(x_r, x, 0);
//  ensures ret = 0 ? Bag(r,x,0) : Bag(r,x,0) &*& bagInvariant(ret);
  ensures  status == 1 ? Bag(x_r, x, 0) && Inv(ret) : Bag(x_r, x, 0);
  ensures  status == -1 || status == 1;
{
  node t;
  node t2;
  id t_r; // ghost
  id t2_r; // ghost
  int v; // ghost

  status := 0;
    //  0: Keep trying
    // -1: Bag was empty
    //  1: Pop succeeded

  exhale status == 1 ==> BagList(t_r, t, v, t2, _) && t != null && Inv(v); // Loop invariant, see below
  while (status == 0)
    invariant -1 <= status <= 1;
//    invariant Bag(r,x,0) &*& (cr = 0 ? true : BagList(rt,t,v,t2,_) &*& t != 0 &*& bagInvariant(v));
    invariant Bag(x_r, x, 0);
    // TODO: Cannot yet use these invariants: they require modelling Caper's immutable
    //       memory, which is modelled in Voila via ghost code (additional assumes).
    //       In Voila's Viper encoding, this ghost code, even if put at the end of the loop body,
    //       is followed by code that havocs regions in order to account for interference, which
    //       destroys the effect of the immutability assumptions.
    //       We therefore have to desugare the loop invariant into in- and exhales.
//    invariant status == 1 ==> BagList(t_r, t, v, t2, _) && t != null && Inv(v);
  {
    inhale status == 1 ==> BagList(t_r, t, v, t2, _) && t != null && Inv(v); // Loop invariant

//    t := [x];
    open_region
      using Bag(x_r, x);
    {
      t := x.hd;
      // Update t_r to be the region id of the bag's head node t
      assert x._nextid |-> ?x_nid1;
      havoc t_r;
      assume t_r == x_nid1;
      // Duplicate the head region
      assert BagList(t_r, t, ?t_v);
      inhale BagList(t_r, t);
      // Update v to be the value of the head node
      havoc v;
      assume v == t_v;
    }

//    if (t = 0) {
//      return 0;
//    }
    if (t == null) {
      status := -1;
    } else {
//      t2 := [t + 1];
      open_region
        using BagList(t_r, t);
      {
        t2 := t.next;
        // Bind t2's region identifier as t2_r
        assert t._nextid |-> ?t_nid1;
        havoc t2_r;
        assume t2_r == t_nid1;
        // Duplicate the region
        assert BagList(t2_r, t2);
        inhale BagList(t2_r, t2);
      }

//      cr := popCAS(x,t,t2);

      assert BagList(t_r, t, ?v_1, ?t2_1);
      assume v_1 == v && t2_1 == t2;
        // TODO: In Caper, BagList(t_r, t, v, t2) is stable because the memory underlying
        //       v and t2 is immutable. This isn't supported in Voila. For now, we'll
        //       simply assume that the values haven't changed.
        //
        // If field next (underlying t2) isn't immutable, the call to popCAS might fail:
        // the call requires node t to precede node t2 (i.e. t.next == t2), but this could no
        // longer be the case if next weren't immutable.
        //
        // If field value (underlying v) weren't immutable, then we wouldn't be able to prove
        // the postcondition: in particular, the assertion Inv(ret) might not hold. This is
        // because Inv(v) is obtained (i.e. taken out of the region) in the loop (via popCAS),
        // where v is the value of t.value at a particular moment in time (at the point where the
        // CAS inside popCAS succeeded). After the loop, t.value is assigned to ret, but if
        // t.value weren't immutable, then we might not hold Inv(ret) afterwards.

      // Duplicate the regions (since popCAS consumes them)
      assert Bag(x_r, x, 0) && BagList(t_r, t, v, t2) && BagList(t2_r, t2);
      inhale Bag(x_r, x, 0) && BagList(t_r, t, v, t2) && BagList(t2_r, t2);

      status := popCAS(x_r, x, t_r, t, t2_r, t2); // TODO: Wrap in use-atomic block?

      // Model memory immutability (as before)
      assert BagList(t_r, t, ?v_2, ?t2_2);
      assume v_2 == v && t2_2 == t2;
      assert BagList(t_r, t, v, t2);

      exhale status == 1 ==> BagList(t_r, t, v, t2, _) && t != null && Inv(v); // Loop invariant
    }
  }
  inhale status == 1 ==> BagList(t_r, t, v, t2, _) && t != null && Inv(v); // Loop invariant

  if (status == 1) {
//    ret := [t];
//    return ret;
    open_region
      using BagList(t_r, t);
    {
      ret := t.value;
    }
  }
}

primitive_atomic procedure CAS(bag x, node now, node thn) returns (int success)
  requires x.hd |-> ?v;
  ensures  success == 0 || success == 1;
  ensures  v == now
              ? success == 1 && x.hd |-> thn
              : success == 0 && x.hd |-> v;
