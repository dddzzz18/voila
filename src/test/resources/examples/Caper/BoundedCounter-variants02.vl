region FCounter(id r, int lvl, memcell x)
  guards { duplicable INCREMENT; }
  interpretation { x.f |-> ?v && 0 <= v <= 2 }
  state { v }
  actions {
    ?n, ?m | n < m <= 2 | INCREMENT: n ~> m;
  }

procedure incrOrNothing(id r, int lvl, memcell x) returns (int ret)
  requires FCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  FCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= ret <= 2;
  ensures  v0 <= ret <= v1;
{
  int v;
  bool changed;
  bool full;

  changed := false;
  full := false;

  do
    invariant FCounter(r, lvl, x, ?vi);
    invariant INCREMENT@r;
    invariant 0 <= v <= 2;
    invariant v0 <= v <= vi;
  {

    open_region
      using FCounter(r, lvl, x);
    {
      v := x.f;
    }

    if (v < 2) {
      use_atomic
        using FCounter(r, lvl, x) with INCREMENT@r;
      {
        changed := CAS(x, v, v + 1);
      }
    } else {
      full := true;
    }

  } while (!changed && !full);

  ret := v;
}




primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

struct memcell {
  int f;
}
