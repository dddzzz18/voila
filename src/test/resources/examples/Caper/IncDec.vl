// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/IncDec.t
//

struct memcell {
  int val;
}

region IncDec(id r, int lvl, memcell x)
  guards {
    unique INC;
    unique DEC;
  }
  interpretation {
    x.val |-> ?n
  }
  state { n }
  actions {
    ?n, ?m | n < m | INC: n ~> m;
    ?n, ?m | m < n | DEC: n ~> m;
    // not supported yet, but not needed here:
    //INC * DEC : n ~> m;
  }


procedure makeCounter(id r, int lvl) returns (memcell ret)
  ensures IncDec(r, lvl, ret, 0) && INC@r && DEC@r;
{
  memcell v;
  // v := alloc(1);
  inhale v.val |-> ?w;

  // [v] := 0;
  v.val := 0;

  // return v;
  ret := v;

  inhale INC@r && DEC@r;
  fold IncDec(r, lvl, ret, 0);
}

procedure increment(id r, int lvl, memcell x, int k) returns (int ret)
  requires IncDec(r, lvl, x, ?v0) && INC@r && k > 0;
  ensures  IncDec(r, lvl, x, ?v1) && INC@r && v1 <= v0 + k;
{
  bool b;
  int v;

  do
    invariant IncDec(r, lvl, x, ?vi) && INC@r && k > 0 &&
              (!b ? vi <= v0 : vi <= v0 + k);
  {
    open_region
      using IncDec(r, lvl, x);
    {
      // v := [x];
      v := x.val;
    }

    use_atomic
      using IncDec(r, lvl, x) with INC@r;
    {
      b := CAS(x, v, v + k);
    }
  } while (!b);

  //return v;
  ret := v;
}

procedure decrement(id r, int lvl, memcell x, int k) returns (int ret)
  requires IncDec(r, lvl, x, ?v0) && DEC@r && k > 0;
  ensures  IncDec(r, lvl, x, ?v1) && DEC@r && v1 >= v0 - k;
{
  bool b;
  int v;

  do
    invariant IncDec(r, lvl, x, ?vi) && DEC@r && k > 0 &&
              (!b ? vi >= v0 : vi >= v0 - k);
  {
    open_region
      using IncDec(r, lvl, x);
    {
      // v := [x];
      v := x.val;
    }

    use_atomic
      using IncDec(r, lvl, x) with DEC@r;
    {
      b := CAS(x, v, v - k);
    }
  } while (!b);

  //return v;
  ret := v;
}

procedure read(id r, int lvl, memcell x) returns (int ret)
  requires IncDec(r, lvl, x, ?v0);
  ensures  IncDec(r, lvl, x);
{
  open_region
    using IncDec(r, lvl, x);
  {
    // v := [x];
    ret := x.val;
    // return v;
  }
}





primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.val |-> ?v;
  ensures  v == now
              ? ret && x.val |-> thn
              : !ret && x.val |-> v;
