// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/ForkJoinClient.t
//

struct memcell {
  int f;
}



region Join(id r, memcell x)
  guards { unique SET; }
  interpretation { x.f |-> ?v && (v == 0 || v == 1) }
  state { v }
  actions { SET: 0 ~> Set(0, 1); }

// TODO: make_join()
memcell make_join(id r)
  requires true;
  ensures Join(r, ret, 0) && SET@r;
//{
//    v := alloc(1);
//    [v] := 0;
//    return v;
//}

void set(id r, memcell x)
  requires Join(r, x, 0) && SET@r;
  ensures  Join(r, x, 1) && SET@r;
{
  use_atomic
    using Join(r, x) with SET@r;
  {
    x.f := 1;
  }
}

void wait(id r, memcell x)
  requires Join(r, x, ?z);
  ensures  Join(r, x, 1);
{
  int v;

  do
    invariant Join(r, x, ?w);
    invariant (v == 0 ? w >= 0 : w == 1);
  {
    open_region
      using Join(r, x);
    {
      v := x.f;
    }
  } while (v == 0);
}



region Flag(id r, id s, memcell x, memcell y)
  guards {unique SFLAG; }
  interpretation {
    x.f |-> ?v && (v == 0 ==> Join(s, y, 0) && SET@s)
  }
  state { v }
  actions { SFLAG: 0 ~> Set(0, 1); }

void thread2(id r, id s, memcell x, memcell y)
  requires Flag(r, s, x, y, 0) && SFLAG@r;
{
  use_atomic
    using Flag(r, s, x, y) with SFLAG@r;
  {
    assert Join(s, y, 0);
    x.f := 1;
  }

  set(s, y);
}

void main()
  requires true;
  // ensures Flag(r,x,y,1) &*& ret = 1;
{
  id r;
  id s;
  memcell x;
  memcell y;
  int v;

  // y := make_join();
    y := make_join(s);

  // x := alloc(1);
    inhale x.f |-> ?q;

  // [x] := 0;
    x.f := 0;

  (
    // TODO: Encode region predicates with wildcard access to account for duplicability?
      inhale Join(s, y);

    // TODO: View shift in TaDA to get Flag(...) and SFLAG?
      fold Flag(r, s, x, y, 0);
      inhale SFLAG@r;
    // TODO: Encode region predicates with wildcard access to account for duplicability?
      inhale Flag(r, s, x, y);

    // fork thread2(x, y);
      exhale Flag(r, s, x, y, 0) && SFLAG@r;
  );

  // wait(y);
    wait(s, y);

  // v := [x];
    open_region
      using Flag(r, s, x, y);
    {
      v := x.f;
    }

  // return v;
    assert Flag(r, s, x, y, 1) && v == 1;
}
