// Corresponds to:
//   https://github.com/caper-tool/caper/blob/master/examples/iterative/ForkJoinClient.t
//


region Flag(id r, int alvl, id s, int lvl, memcell x, memcell y)
  guards { unique SFLAG; }
  interpretation {
       x.f |-> ?v && (v == 0 || v == 1)
    && (v == 0 ==> Join(s, lvl, y, 0) && lvl < alvl && SET@s)
    && (v == 1 ==> Join(s, lvl, y) && lvl < alvl)
  }
  state { v }
  actions { SFLAG: 0 ~> 1; }


procedure thread2(id r, int alvl, id s, int lvl, memcell x, memcell y)
  requires Flag(r, alvl, s, lvl, x, y, 0) && SFLAG@r;
{
  use_atomic using Flag(r, alvl, s, lvl, x, y) with SFLAG@r {
    // duplicateJoin(s, lvl, y, 0)
    assert Join(s, lvl, y, 0);
    inhale Join(s, lvl, y, 0);
    x.f := 1;
  }

  set_to_one(s, lvl, y);
}


procedure main(id dummy, int lvl, int alvl) returns (memcell x, memcell y, id r, id s, int ret)
  level alvl + 1;
  requires alvl > lvl >= 0;
  ensures Flag(r, alvl, s, lvl, x, y) && ret == 1;
{
  x := new memcell(0);

  y, s := makeJoin(lvl);

  duplicate Join(s, lvl, y);

  r := new Flag(alvl, s, lvl, x, y) with SFLAG;

  duplicate Flag(r, alvl, s, lvl, x, y);

  fork thread2(r, alvl, s, lvl, x, y);

  wait(s, lvl, y);

  open_region using Flag(r, alvl, s, lvl, x, y) {
    ret := x.f;
  }
}


/** Join */

struct memcell {
  int f;
}

region Join(id r, int lvl, memcell x)
  guards { 
    unique SET; 
    duplicable Z;
  }
  interpretation { x.f |-> ?v && (v == 0 || v == 1) }
  state { v }
  actions { SET: 0 ~> 1; }


procedure makeJoin(int lvl) returns (memcell ret, id r)
  requires lvl >= 0;
  ensures  Join(r, lvl, ret, 0) && SET@r && Z@r;
{
  ret := new memcell(0);
  r := new Join(lvl, ret) with SET && Z;
}


procedure set_to_one(id r, int lvl, memcell x)
  requires Join(r, lvl, x, 0) && SET@r;
  ensures  Join(r, lvl, x, 1) && SET@r;
{
  use_atomic using Join(r, lvl, x) with SET@r {
    x.f := 1;
  }
}


procedure wait(id r, int lvl, memcell x)
  requires Join(r, lvl, x, ?z);
  ensures  Join(r, lvl, x, 1);
{
  int v;

  do
    invariant Join(r, lvl, x, ?w);
    invariant (v == 0 ? w >= 0 : w == 1);
  {
    open_region using Join(r, lvl, x) {
      v := x.f;
    }
  } while (v == 0);
}


