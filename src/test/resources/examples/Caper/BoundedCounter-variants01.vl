region BCounter(id r, int lvl, memcell x)
  guards { duplicable INCREMENT; }
  interpretation {
    x.f |-> ?v &&
    (v == 0 || v == 1 || v == 2)
  }
  state { v }
  actions {
    // Intended actions (not transitively closed):
    //   INCREMENT: ?n ~> n + 1;
    //   INCREMENT: 2 ~> 0;
    // Transitively closed action:
    //   INCREMENT: ?n ~> ?m;
    // However, it is currently to effectively repeat the state constraints from the interpretation.
    // Otherwise, Voila computes a too large interference context at, e.g. call site of incrAA in
    // the body of incrNA1.
    // The final action thus is:
    ?n, ?m | 0 <= n <= 2 && 0 <= m <= 2 | INCREMENT: n ~> m;
  }

abstract_atomic procedure incrAA(id r, int lvl, memcell x) returns (int ret)
  interference ?v0 in Set(0, 1, 2) on r;
  requires BCounter(r, lvl, x, v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= v1 <= 2 && v1 == (v0 < 2 ? v0 + 1 : 0); 
  ensures ret == v0 && 0 <= ret <= 2;
{
  int v;
  int w;
  bool b;

  make_atomic
    using BCounter(r, lvl, x) with INCREMENT@r;
  {
    do
      invariant BCounter(r, lvl, x);
      invariant !b ==> r |=> <D>;
      invariant 0 <= v <= 2; // Note: Needed after the loop, by make_atomic
      invariant  b ==> r |=> (v, v < 2 ? v + 1 : 0) && ret == v;
    {
      open_region
        using BCounter(r, lvl, x);
      {
        v := x.f;
      }

      if (v < 2) {
        w := v + 1;
      } else {
        w := 0;
      }

      use_region_interpretation BCounter(r, lvl, x); 
    
      update_region
        using BCounter(r, lvl, x);
      {
        b := CAS(x, v, w);
      }

      ret := v;
    } while (!b);
  }
}


procedure incrNA1(id r, int lvl, memcell x) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= ret <= 2;
{
  use_region_interpretation BCounter(r, lvl, x);
  ret := incrAA(r, lvl, x);
}

procedure incrNA2(id r, int lvl, memcell x) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= ret <= 2;
{
  int v;
  bool b;

  v := 0;
  b := false;

  while (!b)
    invariant BCounter(r, lvl, x) && INCREMENT@r;
    invariant 0 <= v <= 2;
  {
    open_region
      using BCounter(r, lvl, x);
    {
      v := x.f;
    }

    use_atomic
      using BCounter(r, lvl, x) with INCREMENT@r;
    {
      b := CAS(x, v, v < 2 ? v + 1 : 0);
    }
  }

  ret := v;
}

abstract_atomic procedure readAA(id r, int lvl, memcell x) returns (int ret)
  interference ?v0 in Set(0, 1, 2) on r;
  requires BCounter(r, lvl, x, v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, v0) && INCREMENT@r;
  ensures  ret == v0;
  ensures  0 <= ret <= 2;
{
  open_region
    using BCounter(r, lvl, x);
  {
    ret := x.f;
  }
}

procedure readNA(id r, int lvl, memcell x) returns (int ret)
  requires BCounter(r, lvl, x, ?v0) && INCREMENT@r;
  ensures  BCounter(r, lvl, x, ?v1) && INCREMENT@r;
  ensures  0 <= ret <= 2;
{
  use_region_interpretation BCounter(r, lvl, x); 
  ret := readAA(r, lvl, x);
}

primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

struct memcell {
  int f;
}
