struct memcell {
  int f;
}


region Lock(id a, int lvl, memcell x)
  guards { unique G; }
  interpretation {
    x.f |-> ?v && (v == 0 || v == 1)
  }
  state { v }
  actions {
    G: 0 ~> 1;
    G: 1 ~> 0;
  }

predicate Inv() /* Invariant of CAP lock (left abstract) */


region CAPLock(id r, int alvl, id a, int lvl, memcell x)
  guards {
    duplicable Z;
    unique K;
  }
  interpretation {
       Lock(a, lvl, x, ?v) && lvl < alvl && G@a
    && (v == 0 ==> K@r && Inv())
    && (v == 1 ==> true)
  }
  state { v }
  actions {
    Z: 0 ~> 1;
    K: 1 ~> 0;
  }




primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;



abstract_atomic procedure unlock(id a, int lvl, memcell x)
  interference ?s in Set(1) on a;
  requires Lock(a, lvl, x, s) && G@a;
  ensures Lock(a, lvl, x, 0) && G@a;
{
  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    update_region
      using Lock(a, lvl, x);
    {
      x.f := 0;
    }
  }
}


procedure non_atomic_unlock(id r, int alvl, id a, int lvl, memcell x)
  requires CAPLock(r, alvl, a, lvl, x, ?v) && v == 1 && K@r;
  requires Inv();
{
  use_atomic
    using CAPLock(r, alvl, a, lvl, x) with K@r;
  {
    unlock(a, lvl, x);
  }
}




abstract_atomic procedure lock(id a, int lvl, memcell x)
  interference ?s in Set(0, 1) on a;
  requires Lock(a, lvl, x, s) && G@a;
  ensures Lock(a, lvl, x, 1) && G@a && s == 0;
{
  bool b;

  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    do
      invariant Lock(a, lvl, x);
      invariant !b ==> a |=> <D>;
      invariant  b ==> a |=> (0, 1);
    {
      update_region
        using Lock(a, lvl, x);
      {
        b := CAS(x, 0, 1);
      }
    } while (!b);
  }
}

procedure non_atomic_lock(id r, int alvl, id a, int lvl, memcell x)
  requires CAPLock(r, alvl, a, lvl, x, ?v1) && (v1 in Set(0, 1)) && Z@r;
  ensures  CAPLock(r, alvl, a, lvl, x, ?v2) && v2 == 1 && K@r;
{
  use_atomic
    using CAPLock(r, alvl, a, lvl, x) with Z@r;
  {
    lock(a, lvl, x);
  }
}
