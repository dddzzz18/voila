struct cell {
  int f;
}

region Counter(id c, int lvl, cell x)
  guards { unique G; }
  interpretation { x.f |-> ?n }
  state { n }
  actions { G: ?n ~> ?m; }

abstract_atomic procedure read(id c, int lvl, cell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;

abstract_atomic procedure incr(id c, int lvl, cell x)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n + 1) && G@c;


/*
 * Corresponds to Fig. 7.2 from Pedro's thesis
 */
procedure seq_client(id c, int lvl, cell x, int n)
  requires 0 < n;
  requires Counter(c, lvl, x, 0) && G@c;
  ensures  Counter(c, lvl, x, n) && G@c;
{
  int m;
  m := n;

  while (0 < m)
    invariant 0 <= m;
    invariant Counter(c, lvl, x, n - m) && G@c;
  {
    incr(c, lvl, x);
    m := m - 1;
  }
}


/*
 * An encoding of Fig. 7.3 from Pedro's thesis
 *
 * Remarks on the current encoding:
 *   1. Complex guard algebras are not yet supported.
 *      For now, this is overcome by modelling the algebra using lemma procedures and calling
 *      them at the appropriate places. This increases the annotation overhead, but is equally
 *      sound as having special support for declaring arbitrary algebras.
 *
 *   2. In Pedro's example, the guard algebra also controls when a region can be disposed.
 *      This aspect is missing from the current Voila encoding.
 */

region CClient(id a, int alvl, id c, int lvl, cell x)
  guards {
    manual INC(int k, frac p);
    manual TOTAL(int n);
  }
  interpretation {
    Counter(c, lvl, x, ?n) && lvl < alvl && G@c && TOTAL(n)@a
  }
  state { n }
  actions {
    ?n, ?m, ?k, ?p | 0f < p && n < m | INC(k, p): n ~> m;
  }

/* Model complex guard algebra via lemma procedures */

lemma INC_split(id a, int k1, int k2, frac p1, frac p2)
  requires INC(k1 + k2, p1 + p2)@a;
  requires 0f < p1 && 0f < p2;
  ensures  INC(k1, p1)@a && INC(k2, p2)@a;

lemma INC_join(id a, int k1, int k2, frac p1, frac p2)
  requires INC(k1, p1)@a && INC(k2, p2)@a;
  requires 0f < p1 && 0f < p2;
  ensures  INC(k1 + k2, p1 + p2)@a;

lemma TOTAL_INC_equality(id a, int n, int k)
  requires TOTAL(n)@a && INC(k, 1f)@a;
  ensures  TOTAL(n)@a && INC(k, 1f)@a;
  ensures  n == k;

lemma TOTAL_INC_update(id a, int n, int k0, int k1, frac p)
  requires TOTAL(n + k0)@a && INC(k0, p)@a;
  requires 0f < p;
  ensures  TOTAL(n + k1)@a && INC(k1, p)@a;

/* Specialised version of (i.e. derived from) TOTAL_INC_update */
lemma TOTAL_INC_inc(id a, int n, int k, frac p)
  requires TOTAL(n)@a && INC(k, p)@a && 0 <= n - k;
  requires 0f < p;
  ensures  TOTAL(n + 1)@a && INC(k + 1, p)@a;
{
  int m;
  assume n == m + k;
  use TOTAL_INC_update(a, m, k, k + 1, p);
}


/*
 * The parallelly-composed code of Fig. 7.3
 */
procedure single_client(id a, int alvl, id c, int lvl, cell x, frac p) returns (int n)
  requires CClient(a, alvl, c, lvl, x, ?v0) && INC( 0, p)@a && 0f < p && 0 <= v0;
  ensures CClient(a, alvl, c, lvl, x,  _) && INC(n, p)@a && 0 <= n;
{
  int i;

  // (TaDA)  n := random();
  havoc n;
  assume 0 <= n;

  i := 0;

  while (i < n)
    invariant 0 <= i && i <= n;
    invariant CClient(a, alvl, c, lvl, x, ?vi) && i <= vi;
    invariant INC(i, p)@a;
  {
    use_atomic
      using CClient(a, alvl, c, lvl, x) with INC(i, p)@a;
    {
      assert Counter(c, lvl, x, ?v);
      incr(c, lvl, x);
      assert Counter(c, lvl, x, v + 1); // [DEBUG]
      assert TOTAL(v)@a && INC(i, p)@a; // [DEBUG]
      use TOTAL_INC_inc(a, v, i, p);
    }

    i := i + 1;
  }
}

/*
 * Main code of Fig. 7.3
 */
procedure client()
  level 2;
{
  id a, c;
  int alvl, lvl;
  cell x;
  int k1;
  int k2;

  lvl := 0;
  alvl := 1;

  x := new cell(0);
  c := new Counter(lvl, x) with G;

  // Create a new CClient region
  a := new CClient(alvl, c, lvl, x) with TOTAL(0) && INC(0, 1f);

  // Duplicate region assertion
  duplicate CClient(a, alvl, c, lvl, x);
  // Split guard INC
  use INC_split(a, 0, 0, 1/2, 1/2);

  parallel {
    k1 := single_client(a, alvl, c, lvl, x, 1/2),
    k2 := single_client(a, alvl, c, lvl, x, 1/2)
  };

  // Join guard INC
  use INC_join(a, k1, k2, 1/2, 1/2);
  // open and close region to perform viewshift.
  unfold CClient(a, alvl, c, lvl, x, _);
  assert Counter(c, lvl, x, ?n);
  use TOTAL_INC_equality(a, n, k1 + k2);
  fold CClient(a, alvl, c, lvl, x, k1 + k2);

  // Dispose CClient region
  unfold CClient(a, alvl, c, lvl, x, k1 + k2);
  // Postcondition of Fig. 7.3
  exhale Counter(c, lvl, x, k1 + k2);
}
