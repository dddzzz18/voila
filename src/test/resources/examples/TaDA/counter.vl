struct memcell {
  int f;
}

region Counter(id c, int lvl, memcell x)
  guards { unique G; }
  interpretation {
    x.f |-> ?n /* Note: In the TaDA paper, n is a natural number (i.e. non-negative) */
  }
  state { n }
  actions {
    G: ?n ~> ?m;
  }


abstract_atomic procedure read(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;
{
  //:: UnexpectedOutput(make-atomic_error:tracking_permission_error, /voila/issue/8/)
  make_atomic
    using Counter(c, lvl, x) with G@c;
  {
    update_region
      using Counter(c, lvl, x);
    {
      ret := x.f;
    }
  }
}

abstract_atomic procedure read2(id c, int lvl, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;
{
  open_region
    using Counter(c, lvl, x);
  {
    ret := x.f;
  }
}

primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

abstract_atomic procedure incr(id c, int lvl, memcell x)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n + 1) && G@c;
{
  int r;
  bool b;

  make_atomic
    using Counter(c, lvl, x) with G@c;
  {
    do
      invariant Counter(c, lvl, x);
      invariant !b ==> c |=> <D>;
      invariant  b ==> c |=> (r, r + 1);
    {
      open_region
        using Counter(c, lvl, x);
      {
        r := x.f;
      }
      update_region
        using Counter(c, lvl, x);
      {
        b := CAS(x, r, r + 1);
      }
    } while (!b);
  }
}

abstract_atomic procedure wkincr(id c, int lvl, memcell x)
  interference ?n in Set[int](n) on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n + 1) && G@c;
{
  int r;

  make_atomic
    using Counter(c, lvl, x) with G@c;
  {
    open_region
      using Counter(c, lvl, x);
    {
      r := x.f;
    }

    update_region
      using Counter(c, lvl, x);
    {
      x.f := r + 1;
    }
  }
}
