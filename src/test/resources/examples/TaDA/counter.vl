struct memcell {
  int f;
}

region Counter(id c, memcell x)
  guards { unique G; }
  interpretation {
    x.f |-> ?n // TODO: n is a Nat (not an Int) in the paper. Here are three ideas:
             //         - Encode a Nat type in Viper (domain, axioms, (un)boxing)
             //         - Add n >= 0 here; must be taken into account when havocking region
             //           Hm ... why? Havocking a region is implemented by ex- & inhaling the region
             //           predicate, and the region state is returned by a function that unfolds the
             //           predicate. Hence, the state should be known to be at least zero.
             //         - Change action for G, s.t. ?m ~> Set(?y | 0 <= y)
             //
  }
  state { n }
  // TODO:
  //   Considered general syntax:
  //
  //     G: ?x if p1(x) ~> Set(?y | q1(x, y))
  //     G: ?x if p2(x) ~> Set(?y | q2(x, y))
  //
  //   Translated as follows, where 'x' translates to 'from':
  //
  //     TransClosure_G(from: T): Set[T] { // from actions
  //       p1(from) ? setcompr1(from) : // TODO: what if guard conditions overlap?
  //       p2(from) ? setcompr2(from) :
  //       Set(from)
  //     }
  //
  //     function setcompr1(from: T): Set[T]
  //       ensures forall y: T :: y in result <==> q1(from, y)
  //
  //     function setcompr2(from: T): Set[T]
  //       ensures forall y: T :: y in result <==> q2(from, y)
  //
  //   Syntactic sugar examples:
  //
  //     0  ~> Set(0, 1)    |===> ?x if x == 0 ~> Set(?y | y == 0 || y == 1)
  //     ?x ~> Set(x + 1)   |===> ?x if x == x ~> Set(?y | y == x + 1)
  //
  actions {
    G: ?m ~> Int;
  }


abstract_atomic procedure read(id c, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, x, n) && G@c;
  ensures Counter(c, x, n) && G@c;
  ensures ret == n;
{
  //:: UnexpectedOutput(make-atomic_error:tracking_permission_error, /voila/issue/8/)
  make_atomic
    using Counter(c, x) with G@c;
  {
    update_region
      using Counter(c, x);
    {
      ret := x.f;
    }
  }
}

abstract_atomic procedure read2(id c, memcell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, x, n) && G@c;
  ensures Counter(c, x, n) && G@c;
  ensures ret == n;
{
  open_region
    using Counter(c, x);
  {
    ret := x.f;
  }
}

primitive_atomic procedure CAS(memcell x, int now, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v == now
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;

abstract_atomic procedure incr(id c, memcell x)
  interference ?n in Int on c;
  requires Counter(c, x, n) && G@c;
  ensures Counter(c, x, n + 1) && G@c;
{
  int r;
  bool b;

  make_atomic
    using Counter(c, x) with G@c;
  {
    do
      invariant Counter(c, x);
      invariant !b ==> c |=> <D>;
      invariant  b ==> c |=> (r, r + 1);
    {
      open_region
        using Counter(c, x);
      {
        r := x.f;
      }
      update_region
        using Counter(c, x);
      {
        b := CAS(x, r, r + 1);
      }
    } while (!b);
  }
}

abstract_atomic procedure wkincr(id c, memcell x)
  interference ?n in Set[int](n) on c;
  requires Counter(c, x, n) && G@c;
  ensures Counter(c, x, n + 1) && G@c;
{
  int r;

  make_atomic
    using Counter(c, x) with G@c;
  {
    open_region
      using Counter(c, x);
    {
      r := x.f;
    }

    update_region
      using Counter(c, x);
    {
      x.f := r + 1;
    }
  }
}
