struct cell {
  int f;
}

region Counter(id c, int lvl, cell x)
  guards { unique G; }
  interpretation { x.f |-> ?n }
  state { n }
  actions { G: ?n ~> ?m; }

abstract_atomic procedure read(id c, int lvl, cell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n) && G@c;
  ensures ret == n;

abstract_atomic procedure incr(id c, int lvl, cell x) returns (int ret)
  interference ?n in Int on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n + 1) && G@c && ret == n;

abstract_atomic procedure wkincr(id c, int lvl, cell x)
  interference ?n in Set<int>(n) on c;
  requires Counter(c, lvl, x, n) && G@c;
  ensures Counter(c, lvl, x, n + 1) && G@c;

region TLock(id r, int alvl, id rx, int xlvl, cell x, id ry, int ylvl, cell y; int m)
  guards { unique TICKET(int n); duplicable Z; }
  interpretation {
  	Counter(rx, xlvl, x, ?n) && G@rx && xlvl < alvl &&
    Counter(ry, ylvl, y, ?m) && G@ry && ylvl < alvl &&
    TICKET|Set( ?k | k >= m )|@r && m >= n
  }
  state { n }
  actions {
  	?n, ?m | n < m | TICKET|Set( ?k | n <= k && k < m )|: n ~> m;
  }


abstract_atomic procedure acquire(id r, int alvl, id rx, int xlvl, cell x, id ry, int ylvl, cell y)
  interference ?n in Int on r;
  requires TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, n) && Z@r;
  ensures  TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, n) && Z@r && TICKET(n)@r;
  // ensure false;
{
  int t;
  int v;

  make_atomic using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y) with Z@r;
  {
    open_region using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y);
    {
      t := incr(ry, ylvl, y);
    }

    assert TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, ?nz);
    assert TICKET(t)@r && t >= nz;

    do
      invariant TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, ?mii, ?nii) && TICKET(t)@r;
      invariant t >= nii && nii >= v;
      invariant v <  t ==> r |=> <D>;
      invariant v == t ==> r |=> (nii, nii);
    {
      open_region using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y); // THIS OPEN_REGION IS FAILING
      {
        v := read(rx, xlvl, x);
        assert Counter(rx, xlvl, x, ?xv) && Counter(ry, ylvl, y, ?yv);
        assert xv <= yv && xv <= t; // before closing the region, the property is correctly known.
      }
      assert TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, ?nf);
      exhale v == t ==> r |=> <D>;
      inhale v == t ==> r |=> (nf, nf);
    }
    while(v < t);
  }
}


procedure acquire2(id r, int alvl, id rx, int xlvl, cell x, id ry, int ylvl, cell y)
  requires TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, _) && Z@r;
  ensures  TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, ?n) && Z@r && TICKET(n)@r;
  // ensure false;
{
  int t;
  int v;

  open_region using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y);
  {
    t := incr(ry, ylvl, y);
    // use_guard_uniqueness TICKET(t)@r;
    // assert Counter(ry, ylvl, y, ?yv) && Counter(rx, xlvl, x, ?xv);
    // assert yv == t+1 && xv < yv;
    // assert xv <= t && TICKET(t)@r;
  }

  do
    invariant TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, ?mii, ?nii) && TICKET(t)@r;
    invariant t >= nii && nii >= v;
  {

    //:: UnexpectedOutput(open-region_error:assertion_error, /voila/issue/106/)
    open_region using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y);
    {
      v := read(rx, xlvl, x);
    }
  }
  while(v < t);
}


abstract_atomic procedure release(id r, int alvl, id rx, int xlvl, cell x, id ry, int ylvl, cell y)
  interference ?n in Set<int>(n) on r;
  requires TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, n) && TICKET(n)@r;
  ensures  TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, n+1);
  // ensures false;
{
  use_atomic using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y) with TICKET(n)@r;
  {
    wkincr(rx, xlvl, x);
    use_guard_uniqueness TICKET(n)@r;
  }
}


procedure release2(id r, int alvl, id rx, int xlvl, cell x, id ry, int ylvl, cell y)
  requires TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, ?n) && TICKET(n)@r;
  ensures  TLock(r, alvl, rx, xlvl, x, ry, ylvl, y, _, _);
  // ensures false;
{
  use_atomic using TLock(r, alvl, rx, xlvl, x, ry, ylvl, y) with TICKET(n)@r;
  {
    wkincr(rx, xlvl, x);
    use_guard_uniqueness TICKET(n)@r;
  }
}
