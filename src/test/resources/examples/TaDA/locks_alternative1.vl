struct memcell {
  int f;
}

region Lock(id a, memcell x)
  guards { unique G; }
  interpretation {
    x.f |-> ?v && v != 0
  }
  state { v < 0 ? 0 : 1 }
  actions {
    G: 0 ~> Set(0, 1);
    G: 1 ~> Set(1, 0);
  }

/*
predicate U(id a, memcell x) {
  Lock(a, x, 0) && G@a
}

predicate L(id a, memcell x) {
  Lock(a, x, 1) && G@a
}
*/

abstract_atomic procedure unlock(id a, memcell x)
  interference ?s in Set(1) on a;
  requires Lock(a, x, s) && G@a; // L(a, x)
  ensures Lock(a, x, 0) && G@a; // U(a, x)
{
  int nonDetNeg;

  // unfold L(a, x);

  havoc nonDetNeg;
  inhale nonDetNeg < 0;

  make_atomic
    using Lock(a, x) with G@a;
  {
    update_region
      using Lock(a, x);
    {
      x.f := nonDetNeg;
    }
  }

  // fold U(a, x);
}

abstract_atomic procedure lock(id a, memcell x)
  interference ?s in Set(0, 1) on a;
  // requires s == 0 ? U(a, x) : L(a, x);
  requires Lock(a, x, s) && G@a;
  // ensures L(a, x) && s == 0;
  ensures Lock(a, x, 1) && G@a && s == 0;
{
  bool b;
  int nonDetPos;

  // if (s == 0) { unfold U(a, x); }
  // else { unfold L(a, x); }

  havoc nonDetPos;
  inhale 0 < nonDetPos;

  make_atomic
    using Lock(a, x) with G@a;
  {
    do
      invariant Lock(a, x);
      invariant !b ==> a |=> <D>;
      invariant  b ==> a |=> (0, 1);
    {
      update_region
        using Lock(a, x);
      {
        b := CASifNeg(x, nonDetPos);
      }
    } while (!b);
  }

  // fold L(a, x);
}

primitive_atomic procedure CASifNeg(memcell x, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v < 0
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;
