struct memcell {
  int f;
}


region Lock(id a, int lvl, memcell x)
  guards { unique G; }
  interpretation {
    x.f |-> ?v && v != 0
  }
  state { v < 0 ? 0 : 1 }
  actions {
    G: 0 ~> 1;
    G: 1 ~> 0;
  }



abstract_atomic procedure unlock(id a, int lvl, memcell x)
  interference ?s in Set(1) on a;
  requires Lock(a, lvl, x, s) && G@a;
  ensures Lock(a, lvl, x, 0) && G@a;
{
  int nonDetNeg;

  havoc nonDetNeg;
  inhale nonDetNeg < 0;

  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    update_region
      using Lock(a, lvl, x);
    {
      x.f := nonDetNeg;
    }
  }
}

abstract_atomic procedure lock(id a, int lvl, memcell x)
  interference ?s in Set(0, 1) on a;
  requires Lock(a, lvl, x, s) && G@a;
  ensures Lock(a, lvl, x, 1) && G@a && s == 0;
{
  bool b;
  int nonDetPos;

  havoc nonDetPos;
  inhale 0 < nonDetPos;

  make_atomic
    using Lock(a, lvl, x) with G@a;
  {
    do
      invariant Lock(a, lvl, x);
      invariant !b ==> a |=> <D>;
      invariant  b ==> a |=> (0, 1);
    {
      update_region
        using Lock(a, lvl, x);
      {
        b := CASifNeg(x, nonDetPos);
      }
    } while (!b);
  }
}

primitive_atomic procedure CASifNeg(memcell x, int thn) returns (bool ret)
  requires x.f |-> ?v;
  ensures  v < 0
              ? ret && x.f |-> thn
              : !ret && x.f |-> v;
